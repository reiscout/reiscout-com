<?php

/**
 * @file
 * Customize commerce modules behaviours for reiscout project needs.
 *
 * Implements address access control.
 *
 * Implementation path:
 * For each property create an individual product referencing the property
 *   Property can be referenced only once by each product type
 *
 * On product add to cart calculate its price and set to line item
 *   https://drupalcommerce.org/discussions/2475/how-dynamically-calculate-sell-price-product-using-rules
 * A rule to Limit each product quantity to 1 and shows the message that product already in cart
 * Admin UI to set prices for new products and update for existed
 * API that get all purchased nids by user of given product type
 *   http://stackoverflow.com/questions/8148138/getting-all-products-owned-by-a-user
 * Access hook that show address only if it is purchased
 * Cart form alter that shows the right product type and only if it is not purchased already
 */

define('REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE', 'reiscout_property_address_access');
define('REISCOUT_PROPERTY_COMMERCE_NODE_TYPE', 'property');

require_once 'reiscout_property_commerce.inc';

function reiscout_property_commerce_menu() {
  // AJAX callback to show login modal
  $items['reiscout_property_commerce_login_modal_ajax_callback/%ctools_js/%node'] = array(
    'page callback' => 'reiscout_property_commerce_login_modal_ajax_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_field_extra_fields().
 */
function reiscout_property_commerce_field_extra_fields() {
  $return = array();

  $return['node']['property'] = array(
    'display' => array(
      'reiscout-number-of-property-lead-sales' => array(
        'label' => t('Number of property lead sales'),
        'description' => t('How many times this lead has been purchased.'),
        'weight' => -10,
      ),
    ),
  );

  return $return;
}

/**
 * Implements menu callback for ajax request to reiscout_property_commerce_login_modal_ajax_callback/%ctools_js/%node path..
 */
function reiscout_property_commerce_login_modal_ajax_callback($js = NULL, $node) {
  // For anonymous show login modal.
  if (!user_is_anonymous()) {
    exit;
  }

  ctools_include('modal');
  ctools_include('ajax');
  $form_state = array(
    'title' => t('Login'),
    'ajax' => TRUE,
  );
  $output = ctools_modal_form_wrapper('user_login', $form_state);
  if (!empty($form_state['executed'])) {
    $commands[] = ctools_ajax_command_redirect('node/' . $node->nid, $delay = 0, $options = array());
    print ajax_render($commands);
    exit;
  }
  print ajax_render($output);
  exit;
}

/**
 * Implements hook_node_view
 *
 * For not authorized user show 'Get property info' button that trigger the modal to login
 * Do nothing for authorized.
 */
function reiscout_property_commerce_node_view($node, $view_mode, $langcode) {
  if ($view_mode != 'full' || $node->type != 'property') {
    return;
  }

  if (user_is_anonymous()) {
    // Include the CTools tools that we need.
    ctools_include('ajax');
    ctools_include('modal');

    // Add CTools' javascript to the page.
    ctools_modal_add_js();

    $sample_style = array(
      'ctools-sample-style' => array(
        'modalSize' => array(
          'type' => 'fixed',
          'width' => 400,
          'height' => 520,
          'addWidth' => 20,
          'addHeight' => 15,
        ),
        'modalOptions' => array(
          'opacity' => .5,
          'background-color' => '#000',
        ),
        'animation' => 'fadeIn',
        'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
      ),
    );
    drupal_add_js($sample_style, 'setting');

    $button = ctools_modal_text_button(
      t('Get Property Address and Owner Info'),
      "reiscout_property_commerce_login_modal_ajax_callback/nojs/".$node->nid,
      t(''),
      'ctools-modal-ctools-sample-style'
    );

    $button = '<span id="login-modal-button">'.$button.'</span>';

    $node->content['login_modal_button'] = array(
      '#markup' => $button,
      '#weight' => -1,
    );

    $t_args = array(
      '!url_login' => url('user/login', array('query' => array('destination' => 'node/' . $node->nid))),
      '!url_video' => url('/', array('fragment' => 'how-it-works')),
    );
    $message = t('<a href="!url_login">Log In</a> to be available to get current property address and owner info. <a href="!url_video">Watch our video about how it works</a>', $t_args);
    drupal_set_message($message);
  }

  if ($number_of_sales = _reiscout_property_commerce_get_number_of_property_lead_sales($node->nid)) {
    $text = format_plural(
      $number_of_sales,
      'This lead has been purchased 1 time',
      'This lead has been purchased @count times'
    );

    $node->content['reiscout-number-of-property-lead-sales'] = array(
      '#prefix' => '<div class="field reiscout-number-of-property-lead-sales">',
      '#markup' => $text,
      '#suffix' => '</div>',
    );
  }
}

/**
 * List of fields to sell access to
 *
 * @todo: handle that list via admin settings form
 */
function reiscout_property_commerce_fields_access_to_sell() {
  return array(
    'field_address',
    'field_owner_status',
    'field_owner_postal_address',
    'field_owner_phone',
  );
}

/**
 * Implements hook_field_access.
 */
function reiscout_property_commerce_field_access($op, $field, $entity_type, $entity, $account) {
  // Access control for property info fields (address and etc) in property node.
  if ($op == 'view' && $entity_type == 'node' && !empty($entity->type) && $entity->type == REISCOUT_PROPERTY_COMMERCE_NODE_TYPE
  &&  in_array($field['field_name'], reiscout_property_commerce_fields_access_to_sell() ) ) {

    // Show property info fields only for
    // - admin role
    // - property owner
    // - user who purchased the address

    // User is an administrator
    $role_admin = user_role_load_by_name('administrator');
    if (user_has_role($role_admin->rid, $account)) {
      return TRUE;
    }

    // User is a property's author
    if ($entity->uid == $account->uid) {
      return TRUE;
    }

    // User has bought a property's address
    if (reiscout_property_commerce_is_node_purchased($entity->nid, REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $account->uid)) {
      return TRUE;
    }

    // Deny access otherwise
    return FALSE;
  }
}

/**
 * Implements hook_node_presave().
 *
 * @todo: we do not provide 'Owner Info' product anymore,
 * so we should rework this function and remove the code
 * that is not needed anymore.
 */
function reiscout_property_commerce_node_presave($node) {
  // Assign products to property nodes on save.
  if (!($node->type == REISCOUT_PROPERTY_COMMERCE_NODE_TYPE) || $node->is_new) {
    return;
  }

  // Looking for existed product or create one and attach to node if it is not attached yet
  if (empty($node->field_address_access_product[LANGUAGE_NONE][0])) {
    if (!empty($node->nid)) {
      $address_access_product = reiscout_property_commerce_load_product_by_property(REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $node->nid);
    }

    if (empty($address_access_product)) {
      $address_access_product = reiscout_property_commerce_create_product(REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $node);
    }
    $node->field_address_access_product[LANGUAGE_NONE][0]['product_id'] = $address_access_product->product_id;
  }
  // Update price for existed attached product
  $address_access_product = (!isset($address_access_product)) ? commerce_product_load($node->field_address_access_product[LANGUAGE_NONE][0]['product_id'])
    : $address_access_product;

  // Its call is cheap as $node already in cache and wouldnt be loaded again and if prices are the theme product would not be saved.
  reiscout_property_commerce_update_price($node, $address_access_product);
}

/**
 * Implements hook_node_delete().
 *
 * @todo: delete linked 'Address Access' product if it has not yet been purchased
 */
function reiscout_property_commerce_node_delete($node) {
  if ($node->type == REISCOUT_PROPERTY_COMMERCE_NODE_TYPE) {
    $address_access_product = reiscout_property_commerce_load_product_by_property(REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $node->nid);
    if ($address_access_product) {
      reiscout_property_commerce_disable($address_access_product);
    }
  }
}

/**
 * Alter results of the services call.
 *
 * Attaches to a node the following information:
 * - a flag if a user has purchased a property's address;
 * - number of property lead sales.
 *
 * This information is used by the app.
 */
function reiscout_property_commerce_services_request_postprocess_alter($controller, $args, $node) {
  if ('_node_resource_retrieve' == $controller['callback'] && 'property' == $node->type) {
    // See reiscout_property_commerce.js module,
    // _reiscout_property_commerce_user_purchased_address_access().
    $node->_user_purchased_address_access_product = reiscout_property_commerce_is_node_purchased(
      $node->nid,
      REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE
    );

    // See reiscout_property_commerce.js module,
    // _reiscout_property_commerce_address_access_purchased().
    $node->_number_of_property_lead_sales = _reiscout_property_commerce_get_number_of_property_lead_sales($node->nid);
  }
}
