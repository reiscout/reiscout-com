<?php

/**
 * @file
 * Reiscout Owner Info -
 * 1. Displays apropriate action buttons and make control over points
 * to get property owner info.
 * 2. Make call to reiscout_connect2data_api
 */

// Define constants
const TERM_ID_POINTS_OWNER_INFO   = 1;


/**
 * Implements hook_menu().
 */
function reiscout_owner_info_menu () {

  $items['get_owner_info/%'] = array(
    'title' => 'Get Owner Info.',
    'page callback' => 'reiscout_owner_info_get_owner_callback',
    'page arguments' => array(1),
    'access callback' => 'reiscout_owner_info_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Access callback
 * 1. Check user roles
 * 2. Check if user have have purchased access to node
 * 3. Check if user have enought points
 */
function reiscout_owner_info_access($nid) {
  global $user;
  $node = node_load($nid);

  // First, check "Owner postal address" field from current node.
  // Return FALSE if node already contains filled owner address field.
  if (isset($node->field_owner_postal_address[LANGUAGE_NONE][0]) ||
      !empty($node->field_owner_postal_address[LANGUAGE_NONE][0])) {
    return FALSE;
  }

  // Check if user is not anonymous
  if (!user_is_anonymous()) {
    // Check if user is not administrator
    if (!in_array('administrator', $user->roles)) {
      // If user is not author of node
      if ($user->uid != $node->uid) {
        // Check if user have purchased access to node
        $node_purchased = reiscout_property_commerce_is_node_purchased($node->nid,
                                                                       REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE,
                                                                       $user->uid);
        // If user have not purchased access to node return FALSE.
        if (!$node_purchased) {
          return FALSE;
        }
      }
    }
  }
  else {
    return FALSE;
  }

  // Check if user have enought points
  $points = userpoints_get_current_points($user->uid, TERM_ID_POINTS_OWNER_INFO);
  if ($points <= 0) {
    drupal_set_message("Not enought points.", "error");
    return FALSE;
  }

  return TRUE;
}


/**
 * Page callback for get_owner_info/%.
 * 1. Make call to reiscout_connect2data_api.
 * 2. Decrease userpoint by one.
 */
function reiscout_owner_info_get_owner_callback($nid) {
  global $user;

  // Getting owner's data (see reiscout_connect2data_api.module)
  $result = reiscout_connect2data_api_get_data($nid);

  if (!$result) {
    drupal_set_message("Error while requesting owner info.", "error");
    // Return to previous page
    drupal_goto();
  }
  else {
    drupal_set_message("Owner info received successfuly.");
    // Decrease points by one
    $params = array(
      'uid' => $user->uid,
      'points' => -1,
      'tid' => TERM_ID_POINTS_OWNER_INFO,
      'operation' => 'Used 1 point to get access to owner.',
    );
    userpoints_userpointsapi($params);
    // Return to previous page
    drupal_goto();
  }
}


/**
 * Implements hook_node_view
 * 1. Check for amount of userpoints.
 * 2. Add action button to get info or to buy points as a commerce product.
 */
function reiscout_owner_info_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $node->type == 'property') {
    global $user;

    // First, check "Owner postal address" field from current node.
    // Do nothing if node already contains filled owner address field.
    if (isset($node->field_owner_postal_address[LANGUAGE_NONE][0]) ||
        !empty($node->field_owner_postal_address[LANGUAGE_NONE][0])) {
      return;
    }

    // Check if user is not anonymous
    if (!user_is_anonymous()) {
      // Check if user is not administrator
      if (!in_array('administrator', $user->roles)) {
        // If user is not author of node
        if ($user->uid != $node->uid) {
          // Check if user have purchased access to node
          $node_purchased = reiscout_property_commerce_is_node_purchased($node->nid,
                                                                         REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE,
                                                                         $user->uid);
          // If user have not purchased access to node then return (do nothing).
          if (!$node_purchased) {
            return;
          }
        }
      }

      $link = '';

      // Prepare HTML-container for action buttons
      if (!isset($node->content['commerce-buttons'])) {
        $node->content['commerce-buttons'] = array(
          '#prefix' => '<div class="commerce-buttons">',
          '#suffix' => '</div>',
          '#markup' => '',
          '#weight' => -1,
        );
      }

      $points = userpoints_get_current_points($user->uid, TERM_ID_POINTS_OWNER_INFO);
      $button_name = 'Get Property Owner' . ' (' . $points . ' points left)';
      $callback_path = 'get_owner_info/' . $node->nid . '/';
      $rules_buy_link = 'buy_owner_info';

      $destination = drupal_get_destination();

      // If user have points for current action
      if ($points > 0) {
        $link = l($button_name, url($callback_path, array('query' => $destination, 'absolute' => TRUE), array('html' => TRUE)));
        $node->content['commerce-buttons']['#markup'] .= '<div class="callback-link">' . $link . '</div>';
      }
      // If user have not points
      else {
        $parameters = array();
        // Add link/button via rules to buy points as commerce product
        $rendered_link = rules_link_render($rules_buy_link, $node->nid, $destination, $parameters);
        if (!empty($rendered_link)) {
          $link =  render($rendered_link);
          $node->content['commerce-buttons']['#markup'] .= $link;
        }
      }
    }
  }
}
