<?php

/**
 * @file
 * Customize commerce modules behaviours for reiscout project needs.
 *
 * Implements address access control.
 *
 * Implementation path:
 * For each property create an individual product referencing the property
 *   Property can be referenced only once by each product type
 *
 * On product add to cart calculate its price and set to line item
 *   https://drupalcommerce.org/discussions/2475/how-dynamically-calculate-sell-price-product-using-rules
 * A rule to Limit each product quantity to 1 and shows the message that product already in cart
 * Admin UI to set prices for new products and update for existed
 * API that get all purchased nids by user of given product type
 *   http://stackoverflow.com/questions/8148138/getting-all-products-owned-by-a-user
 * Access hook that show address only if it is purchased
 * Cart form alter that shows the right product type and only if it is not purchased already
 */

define('REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE', 'reiscout_property_address_access');
define('REISCOUT_PROPERTY_COMMERCE_OWNER_INFO_PRODUCT_TYPE', 'reiscout_property_owner_info');
define('REISCOUT_PROPERTY_COMMERCE_NODE_TYPE', 'property');

require_once 'reiscout_property_commerce.inc';

function reiscout_property_commerce_menu () {
  // Module settings.
  $items['admin/commerce/config/reiscout'] = array(
    'title' => 'Reiscout Commerce Settings',
    'description' => 'Reiscout settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reiscout_property_commerce_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'reiscout_property_commerce.admin.inc',
  );

  // AJAX callback to show login modal
  $items['reiscout_property_commerce_login_modal_ajax_callback/%ctools_js/%node'] = array(
    'page callback' => 'reiscout_property_commerce_login_modal_ajax_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements menu callback for ajax request to reiscout_property_commerce_login_modal_ajax_callback/%ctools_js/%node path..
 */
function reiscout_property_commerce_login_modal_ajax_callback($js = NULL, $node) {

  // For anonymous show login modal.
  if (!user_is_anonymous()) {
    exit;
  }

  ctools_include('modal');
  ctools_include('ajax');
  $form_state = array(
    'title' => t('Login'),
    'ajax' => TRUE,
  );
  $output = ctools_modal_form_wrapper('user_login', $form_state);
  if (!empty($form_state['executed'])) {
    $commands[] = ctools_ajax_command_redirect('node/' . $node->nid, $delay = 0, $options = array());
    print ajax_render($commands);
    exit;
  }
  print ajax_render($output);
  exit;
}

/**
 * Implements hook_node_view
 *
 * For not authorized user show 'Get property info' button that trigger the modal to login
 * Do nothing for authorized.
 */
function reiscout_property_commerce_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $node->type == 'property') {

    if (user_is_anonymous()) {

      // Include the CTools tools that we need.
      ctools_include('ajax');
      ctools_include('modal');

      // Add CTools' javascript to the page.
      ctools_modal_add_js();

      $sample_style = array(
        'ctools-sample-style' => array(
          'modalSize' => array(
            'type' => 'fixed',
            'width' => 400,
            'height' => 520,
            'addWidth' => 20,
            'addHeight' => 15,
          ),
          'modalOptions' => array(
            'opacity' => .5,
            'background-color' => '#000',
          ),
          'animation' => 'fadeIn',
          'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
        ),
      );
      drupal_add_js($sample_style, 'setting');

      $button = ctools_modal_text_button(
        t('Get Property Address and Owner Info'),
        "reiscout_property_commerce_login_modal_ajax_callback/nojs/".$node->nid,
        t(''),
        'ctools-modal-ctools-sample-style'
      );
      
      $button = '<span id="login-modal-button">'.$button.'</span>';

      $node->content['login_modal_button'] = array(
        '#markup' => $button,
        '#weight' => -1,
      );
    }
  }
}

/**
 * List of fields to sell access to
 *
 * @todo: handle that list via admin settings form
 */
function reiscout_property_commerce_fields_access_to_sell() {
  return array(
    'field_address_text',
    'field_owner_fname',
    'field_owner_lname',
    'field_owner_phone',
    'field_owner_address',
  );
}

/**
 * Implements hook_field_access.
 */
function reiscout_property_commerce_field_access($op, $field, $entity_type, $entity, $account) {
  // Access control for property info fields (address and etc) in property node.
  if ($op == 'view' && $entity_type == 'node' && !empty($entity->type) && $entity->type == REISCOUT_PROPERTY_COMMERCE_NODE_TYPE
  &&  in_array($field['field_name'], reiscout_property_commerce_fields_access_to_sell() ) ) {

    // Do nothing if current user is admin
    if ($account->uid == 1) {
      return;
    }

    // Show property info fields only for
    // - admin role
    // - property owner
    // - user purchased the address

    // Allow access if user is an author.
    if ($entity->uid == $account->uid) {
      return TRUE;
    }

    // Allow access if user purchased the node.
    if (reiscout_property_commerce_is_node_purchased($entity->nid, REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $account->uid)) {
      return TRUE;
    }

    // Deny access otherwise
    return FALSE;
  }

}

/**
 * Implements hook_form_alter().
 */
function reiscout_property_commerce_form_property_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide product selection on property node edit page.
  $form['field_product']['#access'] = FALSE;
}

/**
 * Implements hook_entity_load().
 */
function reiscout_property_commerce_entity_load($entities, $type) {
  if ($type === 'node' && !user_is_anonymous()) {
    // This is related to reiscout_property_commerce_form_commerce_cart_add_to_cart_form_alter()
    // in reiscout_property_commerce.js of the App module
    foreach ($entities as &$entity) {
      if ($entity->type === REISCOUT_PROPERTY_COMMERCE_NODE_TYPE) {
        $avaliable_products = reiscout_property_commerce_get_property_avaliable_products($entity);
        $avaliable_product = array_pop($avaliable_products);
        if (!empty($avaliable_product)) {
          $entity->_reiscout_property_commerce_product_id = $avaliable_product->product_id;
          $entity->_reiscout_property_commerce_product_type = $avaliable_product->type;
        }
      }
    }

    // Add _purchased_counter
    $nids = [];
    foreach ($entities as $nid => $entity) {
      if ($entity->type === REISCOUT_PROPERTY_COMMERCE_NODE_TYPE && !isset($entity->_purchased_counter)) {
        $entity->_purchased_counter = 0;
        $nids[] = $nid;
      }
    }
    if ($nids) {
      $counters = reiscout_property_commerce_get_purchased_counters($nids);
      if ($counters) {
        foreach ($counters as $counter) {
          if (isset($entities[$counter->nid])) {
            // @ToDo: rename _purchased_counter to _reiscout_property_commerce_purchased_counter
            $entities[$counter->nid]->_purchased_counter = $counter->counter;
          }
        }
      }
    }

  }
}

/**
 * Implements hook_node_view_alter().
 */
function reiscout_property_commerce_node_view_alter(&$build) {
  if (isset($build['#node']) && $build['#node']->type === REISCOUT_PROPERTY_COMMERCE_NODE_TYPE) {
    $node = $build['#node'];

    // Do not disable commerce 'add to cart' buttons for a while.
    $disable_commerce_add_to_cart_buttons = false;

    if (isset($build['#view_mode']) && $build['#view_mode'] === 'full') {
      // Disable commerce 'add to cart' buttons and replace them with 'we are not ready yet' subscribe form in popup.
      if ($disable_commerce_add_to_cart_buttons) {
        module_load_include('inc', 'popup', 'includes/popup.api');

        $popupOptions = array(
          'block' => true,
          'module' => 'mailchimp_signup',
          'delta' => 'we_arent_ready_yet',
          'activate' => 'click',
          'ajax' => true,
          'close' => true,
          'width' => 400,
          'class' => 'we-arent-ready-yet-popup',
        );

        $fields = array(
          'field_address_access_product' => array(
            'title' => 'Buy Property Address for @price @cur',
            'price callback' => 'reiscout_property_commerce_get_property_address_price',
            'price callback args' => array($node),
          ),
          'field_owner_info_product' => array(
            'title' => 'Buy Owner Info for @price @cur',
            'price callback' => 'reiscout_property_commerce_get_owner_info_price',
          )
        );

        foreach ($fields as $field => $options) {
          if (isset($build[$field])) {
            $price = call_user_func_array($options['price callback'], (isset($options['price callback args']) ? $options['price callback args'] : array()));
            $build[$field] = array(
              '#markup' => popup(array_merge($popupOptions, array(
                'title' => t($options['title'], array(
                  '@price' => commerce_currency_amount_to_decimal($price['amount'], $price['currency_code']),
                  '@cur' => $price['currency_code'],
                ))
              ))),
              '#prefix' => '<div>',
              '#suffix' => '</div>',
              '#weight' => $build[$field]['#weight'],
            );
          }
        }
      }

      // Add to image field prefix message 'This lead has been purchased: X times'
      if (isset($build['field_image']) && !user_is_anonymous()) {
        if (!isset($build['field_image']['#suffix'])) {
          $build['field_image']['#suffix'] = '';
        }

        if (isset($node->_purchased_counter)) {
          $purchasedMessage = format_plural(
            $node->_purchased_counter
            , 'This lead has been purchased: 1 time'
            , 'This lead has been purchased: @count times'
          );
          
          $build['field_image']['#suffix'] = $purchasedMessage . $build['field_image']['#suffix'];
        }
      }
    } // ENDIF for view mode 'full'

  } // ENDIF to check for node type 'property'

}

/**
 * Implements hook_node_presave().
 */
function reiscout_property_commerce_node_presave($node) {
  // Assign products to property nodes on save.
  if (!($node->type == REISCOUT_PROPERTY_COMMERCE_NODE_TYPE) || $node->is_new) {
    return;
  }

  // Looking for existed product or create one and attach to node if it is not attached yet
  if (empty($node->field_owner_info_product[LANGUAGE_NONE][0])) {
    if (!empty($node->nid)) {
      $owner_info_product = reiscout_property_commerce_load_product_by_property(REISCOUT_PROPERTY_COMMERCE_OWNER_INFO_PRODUCT_TYPE, $node->nid);
    }

    if (empty($owner_info_product)) {
      $owner_info_product = reiscout_property_commerce_create_product(REISCOUT_PROPERTY_COMMERCE_OWNER_INFO_PRODUCT_TYPE, $node);
    }

    $node->field_owner_info_product[LANGUAGE_NONE][0]['product_id'] = $owner_info_product->product_id;
  }
  // Update price for existed attached product
  $owner_info_product = (!isset($owner_info_product)) ? commerce_product_load($node->field_owner_info_product[LANGUAGE_NONE][0]['product_id'])
    : $owner_info_product;

  // Its call is cheap as $node already in cache and wouldnt be loaded again and if prices are the theme product would not be saved.
  reiscout_property_commerce_update_price($node, $owner_info_product);

  // The save as for above for address access product
  // Looking for existed product or create one and attach to node if it is not attached yet
  if (empty($node->field_address_access_product[LANGUAGE_NONE][0])) {
    if (!empty($node->nid)) {
      $address_access_product = reiscout_property_commerce_load_product_by_property(REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $node->nid);
    }

    if (empty($address_access_product)) {
      $address_access_product = reiscout_property_commerce_create_product(REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $node);
    }
    $node->field_address_access_product[LANGUAGE_NONE][0]['product_id'] = $address_access_product->product_id;
  }
  // Update price for existed attached product
  $address_access_product = (!isset($address_access_product)) ? commerce_product_load($node->field_address_access_product[LANGUAGE_NONE][0]['product_id'])
    : $address_access_product;

  // Its call is cheap as $node already in cache and wouldnt be loaded again and if prices are the theme product would not be saved.
  reiscout_property_commerce_update_price($node, $address_access_product);
}

/**
 * Implements hook_form_alter().
 */
function reiscout_property_commerce_form_alter(&$form, &$form_state, $form_id) {
  if (substr_count($form_id, 'commerce_cart_add_to_cart_form_') == 1) {
    reiscout_property_commerce_form_commerce_cart_form_alter($form, $form_state, $form_id);
  }
  if (substr_count($form_id, 'views_form_commerce_cart_form_') == 1) {
    unset($form['actions']['submit']);
  }
}

/**
 * It is NOT a hook and called from reiscout_property_commerce_form_alter
 */
function reiscout_property_commerce_form_commerce_cart_form_alter(&$form, &$form_state, $form_id) {
  // Check that product type is the one needed to be processed.
  $product = commerce_product_load($form['product_id']['#value']);
  if (!in_array($product->type, array(
    REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE,
    REISCOUT_PROPERTY_COMMERCE_OWNER_INFO_PRODUCT_TYPE
  ))) {
    return;
  }

  // Disable access for anonymous and exit
  if (user_is_anonymous()) {
    $form['#access'] = FALSE;
    return;
  }

  $node = node_load($form_state['context']['entity_id']);

  // Process Owner Info product
  if ($product->type == REISCOUT_PROPERTY_COMMERCE_OWNER_INFO_PRODUCT_TYPE) {
    // Check to allow user to buy owner info
    if ($node->uid == $GLOBALS['user']->uid
      && !reiscout_property_commerce_is_node_purchased($node->nid, REISCOUT_PROPERTY_COMMERCE_OWNER_INFO_PRODUCT_TYPE, $GLOBALS['user']->uid)) {
      $price = reiscout_property_commerce_get_owner_info_price();
      $form['submit']['#value'] = t('Buy Owner Info for @price @cur',
        array(
          '@price' => commerce_currency_amount_to_decimal($price['amount'], $price['currency_code']),
          '@cur' => $price['currency_code'],
        )
      );
    } else {
      $form['#access'] = FALSE;
    }
  }

  // Process Address Access product
  if ($product->type == REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE) {
    // Check to allow user to buy an address:
    //  - user not an author AND
    //  - user not purchased it already
    if ($node->uid != $GLOBALS['user']->uid
      && !reiscout_property_commerce_is_node_purchased($node->nid, REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $GLOBALS['user']->uid)) {
      $price = reiscout_property_commerce_get_property_address_price($node);
      $form['submit']['#value'] = t('Buy Property Address for @price @cur',
        array(
          '@price' => commerce_currency_amount_to_decimal($price['amount'], $price['currency_code']),
          '@cur' => $price['currency_code'],
        )
      );
    } else {
      $form['#access'] = FALSE;
    }
  }
}

/**
 * Get avaliable products for node
 */
function reiscout_property_commerce_get_property_avaliable_products($node) {

  // No products for anonymous and exit
  if (user_is_anonymous()) {
    return array();
  }

  $avaliable_products = array();

  // Is Owner Info product avaliable
  if ($node->uid == $GLOBALS['user']->uid
  && !reiscout_property_commerce_is_node_purchased($node->nid, REISCOUT_PROPERTY_COMMERCE_OWNER_INFO_PRODUCT_TYPE, $GLOBALS['user']->uid)
  ) {
    $avaliable_products[] = commerce_product_load($node->field_owner_info_product[LANGUAGE_NONE][0]['product_id']);
  }

  // Is Address Info product avaliable
  if ($node->uid != $GLOBALS['user']->uid
  && !reiscout_property_commerce_is_node_purchased($node->nid, REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $GLOBALS['user']->uid))
  {
    $avaliable_products[] = commerce_product_load($node->field_address_access_product[LANGUAGE_NONE][0]['product_id']);
  }

  return $avaliable_products;
}

/**
 * Implements hook_node_delete().
 */
function reiscout_property_commerce_node_delete($node) {
  if ($node->type == REISCOUT_PROPERTY_COMMERCE_NODE_TYPE) {
    $owner_info_product = reiscout_property_commerce_load_product_by_property(REISCOUT_PROPERTY_COMMERCE_OWNER_INFO_PRODUCT_TYPE, $node->nid);
    if ($owner_info_product) {
      reiscout_property_commerce_disable($owner_info_product);
    }

    $address_access_product = reiscout_property_commerce_load_product_by_property(REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $node->nid);
    if ($address_access_product) {
      reiscout_property_commerce_disable($address_access_product);
    }
  }
}