<?php

/**
 * @file
 * Rules Points - customize userpoints and some other modules behaviours
 * for reiscout project needs.
 */

// Define constants for userpoints taxonomy terms
const TERM_ID_POINTS_OWNER_INFO   = 1;
const TERM_ID_POINTS_SEND_LETTERS = 2;


/**
 * Implements hook_menu().
 */
function reiscout_points_menu () {

  $items['get_owner_info/%'] = array(
    'title' => 'Get Owner Info.',
    'page callback' => '_get_owner_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['send_letter/%'] = array(
    'title' => 'Send a letter to Property Owner.',
    'page callback' => '_send_letter_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Page callback for get_owner_info/%.
 */
function _get_owner_callback($nid) {
  global $user;

  // Getting owner's data (see reiscout_owner_info.module)
  $output = reiscout_owner_info_get_data($nid);

  if ($output != NULL) {
    // Display output to user (testing mode)
    drupal_set_message($output);
    // Decrease points by one
    $params = array(
      'uid' => $user->uid,
      'points' => -1,
      'tid' => TERM_ID_POINTS_OWNER_INFO,
      'operation' => 'Used 1 point to get access to owner.',
    );
    userpoints_userpointsapi($params);
  }
  else {
    drupal_set_message("Error while requesting owner info.");
  }
  // Return to previous page
  drupal_goto();
}


/**
 * Page callback for send_letter/%.
 */
function _send_letter_callback($nid) {
  global $user;

  // Call letters API initialization (see reiscout_send_letters.module)
  $output = reiscout_send_letters_initialize($nid);
  drupal_set_message($output);

  // Decrease points by one
  $params = array(
    'uid' => $user->uid,
    'points' => -1,
    'tid' => TERM_ID_POINTS_SEND_LETTERS,
    'operation' => 'Used 1 point to send letter.',
  );
  userpoints_userpointsapi($params);

  // Return to previous page
  drupal_goto();
}


/**
 * Implements hook_node_view
 */
function reiscout_points_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $node->type == 'property') {
    if (!user_is_anonymous()) {
      global $user;
      $link = '';
      $button_links = array();

      drupal_add_css(drupal_get_path('module', 'reiscout_points') . '/reiscout_points.css', 'file');

      $actions = array();

      // Getting user points amount for owner's info (tid = 1)
      $actions['owner_info']['points'] = userpoints_get_current_points($user->uid, TERM_ID_POINTS_OWNER_INFO);
      $actions['owner_info']['button_name'] = 'Get Property Owner';
      $actions['owner_info']['callback_path'] = 'get_owner_info/' . $node->nid;
      $actions['owner_info']['buy_link'] = 'buy_owner_info';

      // Getting user points amount for sending letters (tid = 2)
      $actions['sending_letters']['points'] = userpoints_get_current_points($user->uid, TERM_ID_POINTS_SEND_LETTERS);
      $actions['sending_letters']['button_name'] = 'Send a letter to Property Owner';
      $actions['sending_letters']['callback_path'] = 'send_letter/' . $node->nid;
      $actions['sending_letters']['buy_link'] = 'buy_sending_letter';

      // Prepare HTML-container for action buttons
      $node->content['commerce-buttons'] = array(
        '#prefix' => '<div class="commerce-buttons">',
        '#suffix' => '</div>',
        '#markup' => '',
        '#weight' => -1,
      );

      // Walk thru actions
      foreach ($actions as $id => $action) {

        // If user have points for current action
        if ($action['points'] > 0) {

          $destination = drupal_get_destination();
          $link = l($action['button_name'] . ' (' . $action['points'] . ' points left)',
                    url($action['callback_path'] . '/', array('html' => TRUE, 'query' => $destination, 'absolute' => TRUE)));
          $node->content['commerce-buttons']['#markup'] .= $link;
        }
        // If user have not points
        else {
          $destination = drupal_get_destination();
          $parameters = array();

          // Add link/button via rules to buy points as commerce product
          $rendered_link = rules_link_render($action['buy_link'], $node->nid, $destination, $parameters);
          if (!empty($rendered_link)) {
            $link =  render($rendered_link);
            $node->content['commerce-buttons']['#markup'] .= $link;
          }
        }
      }
    }
  }
}
