<?php
/**
 * @file
 * Code for the Property feature.
 */

include_once 'property.features.inc';

/**
 * Implements hook_menu().
 */
function property_menu() {
  $items['properties/my/table'] = array(
    'title' => 'Table',
    'description' => 'A list of properties in table form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('property_table_form'),
    'access callback' => '_reiscout_misc_user_has_administrator_role',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'property.pages.inc',
  );

  $items['properties/import'] = array(
    'title' => 'Import properties from a XLSX document',
    'description' => 'Allows to import properties from a XLSX document.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('property_import_form'),
    'access callback' => '_reiscout_misc_user_has_administrator_role',
    'type' => MENU_CALLBACK,
    'file' => 'property.pages.inc',
  );

  $items['property/%/field/%/get-value'] = array(
    'page callback' => 'property_field_get_value',
    'page arguments' => array(1, 3),
    'access callback' => '_reiscout_misc_user_has_administrator_role',
    'type' => MENU_CALLBACK,
    'file' => 'property.pages.inc',
  );

  $items['property/%/field/%/save-value'] = array(
    'page callback' => 'property_field_save_value',
    'page arguments' => array(1, 3),
    'access callback' => '_reiscout_misc_user_has_administrator_role',
    'type' => MENU_CALLBACK,
    'file' => 'property.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function property_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ('properties/my' == $root_path || 'properties/my/table' == $root_path) {
    $data['actions']['output'][] = array(
      '#theme' => 'menu_local_action',
      '#link' => array(
        'title' => '+ Add property',
        'href' => 'node/add/property',
      ),
    );

    $item = menu_get_item('properties/import');
    $item['title'] = "\u{2192} " . $item['title'];
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function property_query_phone_not_in_dnc_alter(QueryAlterableInterface $query) {
  $query->innerJoin('field_data_field_owner_phone', 'fop', 'node.nid = fop.entity_id');
  $query->leftJoin('reiscout_dnc_registry', 'r', "REGEXP_REPLACE(fop.field_owner_phone_value, '\\\D', '') = r.number");
  $query->isNull('r.number');
  $query->groupBy('node.nid');
}

/**
 * Implements hook_query_TAG_alter().
 */
function property_query_phone_in_dnc_alter(QueryAlterableInterface $query) {
  global $user;

  $query_not_in_dnc = db_select('node', 'n')
    ->distinct()
    ->fields('n', array('nid'));
  $query_not_in_dnc
    ->innerJoin('field_data_field_owner_phone', 'fop', 'n.nid = fop.entity_id');
  $query_not_in_dnc
    ->leftJoin('reiscout_dnc_registry', 'r', "REGEXP_REPLACE(fop.field_owner_phone_value, '\\\D', '') = r.number");
  $query_not_in_dnc
    ->isNull('r.number');
  $query_not_in_dnc
    ->condition('uid', $user->uid)
    ->condition('type', 'property');

  $query->innerJoin('field_data_field_owner_phone', 'fop', 'node.nid = fop.entity_id');
  $query->condition('node.nid', $query_not_in_dnc, 'NOT IN');
  $query->groupBy('node.nid');
}

/**
 * Implements hook_query_TAG_alter().
 */
function property_query_lead_status_is_not_set_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_lead_status', 'fls', 'node.nid = fls.entity_id');
  $query->isNull('fls.field_lead_status_value');
}

/**
 * Implements hook_query_TAG_alter().
 *
 * @todo: what if Last Sale Date field is not set for a property?
 */
function property_query_exclude_sold_after_case_file_date_alter(QueryAlterableInterface $query) {
  $query->innerJoin('field_data_field_last_sale_date', 'flsd', 'node.nid = flsd.entity_id');
  $query->innerJoin('field_data_field_case_file_date', 'fcfd', 'node.nid = fcfd.entity_id');
  $query->where('flsd.field_last_sale_date_value < fcfd.field_case_file_date_value');
}

/**
 * Implements hook_query_TAG_alter().
 */
function property_query_order_by_alter(QueryAlterableInterface $query) {
  $field = $query->getMetaData('order_field');
  $direction = $query->getMetaData('order_direction');
  $query->leftJoin('field_data_' . $field, 'of', 'node.nid = of.entity_id');
  $query->orderBy('of.' . $field . '_value', $direction);
}

/**
 * Changes the order of jquery.ui.button.min.js on a page.
 *
 * To display jQuery dialog messages on My Properties (Table) page correctly,
 * jquery.ui.button.min.js must be added to the page after bootstrap.min.js.
 */
function property_js_alter(&$js) {
  if (isset($js['sites/all/modules/contrib/jquery_update/replace/ui/ui/minified/jquery.ui.button.min.js'])) {
    $js['sites/all/modules/contrib/jquery_update/replace/ui/ui/minified/jquery.ui.button.min.js']['group'] = JS_THEME;
  }
}
