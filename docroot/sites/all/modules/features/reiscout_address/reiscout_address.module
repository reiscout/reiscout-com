<?php
/**
 * @file
 * Drupal needs this blank file.
 */

function reiscout_address_init() {
  $modulePath = drupal_get_path('module', 'reiscout_address');
  drupal_add_css($modulePath . '/reiscout_address.css');
}

/**
 * Implements hook_rest_server_request_parsed_alter().
 */
function reiscout_address_rest_server_request_parsed_alter(&$data, $controller) {
  // If services was requested to create a Property node
  if ('_node_resource_create' == $controller['callback'] && 'property' == $data['type']) {
    _reiscout_address_prepare_addressfield_data_to_address_autocomplete_widget($data, 'field_address');
  }
  // If services was requested to update a Property node
  elseif ('_node_resource_update' == $controller['callback'] && 'property' == $data['node']['type']) {
    _reiscout_address_prepare_addressfield_data_to_address_autocomplete_widget($data['node'], 'field_address');
  }
  // If services was requested to update a user profile
  elseif ('_user_resource_update' == $controller['callback']) {
    _reiscout_address_prepare_addressfield_data_to_address_autocomplete_widget($data, 'field_user_postal_address');
  }
}

/**
 * Prepares addressfield data for 'Addressfield Autocomplete' widget.
 *
 * Data for the field_address field that comes from the mobile application is
 * compatible with standard 'Dynamic address form' widget which provided by
 * Address Field module. But we use 'Addressfield Autocomplete' widget which
 * provided by Addressfield Autocomplete module. So we need to prepare data
 * to the last widget before send it for saving.
 */
function _reiscout_address_prepare_addressfield_data_to_address_autocomplete_widget(&$data, $field_name) {
  // If a user has not access to the field in the mobile application,
  // its value will not be set.
  //
  // See reiscout_property_form_alter() in app/modules/custom/reiscout_property/reiscout_property.js
  if (isset($data[$field_name])) {
    $field_name_class = str_replace('_', '-', $field_name);

    $data[$field_name]['und'][0]['latitude'] = $data[$field_name_class . '-und-0-value-latitude'];
    $data[$field_name]['und'][0]['longitude'] = $data[$field_name_class . '-und-0-value-longitude'];
    $data[$field_name]['und'][0] = array(
      $field_name => array(
        'reveal' => 0,
        'autocomplete' => $data[$field_name_class . '-und-0-value-autocomplete'],
        'widget' => $data[$field_name]['und'][0],
      ),
    );

    // We don't need these auxiliary fields anymore.
    unset($data[$field_name_class . '-und-0-value-autocomplete']);
    unset($data[$field_name_class . '-autocomplete-markup']);
    unset($data[$field_name_class . '-und-0-value-latitude']);
    unset($data[$field_name_class . '-und-0-value-longitude']);
  }
}

/**
 * Implements hook_entity_load().
 */
function reiscout_address_entity_load($entities, $type) {
  if ($type === 'node' && !user_is_anonymous()) {
    foreach ($entities as $entity) {
      if ($entity->type === 'property') {
        // When field_address field is being saved, _addressfield_autocomplete_widget_transform()
        // generates an array with following values:
        //   $data = array(
        //     'latitude' => lat_val,
        //     'longitude' => long_val,
        //     'zoom' => zoom_val,
        //     'formatted_address' => fm_val,
        //   );
        //
        // and serializes the array:
        //   $address['data'] = serialize($data);
        //
        // We use this data in the mobile application to fill fields related
        // to field_address field on the Property's node_edit page:
        // - address autocomplete;
        // - latitude;
        // - longitude.
        //
        // See reiscout_address_form_alter() in app/modules/custom/reiscout_address/reiscout_address.js
        //
        // We cannot use serialized string in the mobile application, so we
        // unserialize the data and encode it as JSON.
        if (!empty($entity->field_address[LANGUAGE_NONE][0]['data'])) {
          $data = unserialize($entity->field_address[LANGUAGE_NONE][0]['data']);
          // We do not need 'zoom' value
          unset($data['zoom']);
          $entity->field_address[LANGUAGE_NONE][0]['data_json'] = json_encode($data);
        }
      }
    }
  }
  elseif ($type === 'user' && !user_is_anonymous()) {
    foreach ($entities as $entity) {
      if (!empty($entity->field_user_postal_address[LANGUAGE_NONE][0]['data'])) {
        $data = unserialize($entity->field_user_postal_address[LANGUAGE_NONE][0]['data']);
        // We do not need 'zoom' value
        unset($data['zoom']);
        $entity->field_user_postal_address[LANGUAGE_NONE][0]['data_json'] = json_encode($data);
      }
    }
  }
}
