<?php

/**
 * @file
 * Reiscout Owner Info -
 * 1. Displays apropriate action buttons and make control over points
 * to get property owner info.
 * 2. Make call to connect2data_api
 */

// Define constants
// ToDo: put term to feature useing uuid and replace id here to uuid.
const TERM_ID_POINTS_OWNER_INFO   = 1;


/**
 * Implements hook_menu().
 */
function reiscout_owner_info_menu () {
  // ToDo: repmove menu callback in favor or form.
  $items['get_owner_info/%node'] = array(
    'title' => 'Get Owner Info.',
    'page callback' => 'reiscout_owner_info_get_owner_callback',
    'page arguments' => array(1),
    'access callback' => 'reiscout_owner_info_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Access callback
 * 1. Check user roles
 * 2. Check if user have have purchased access to node
 * 3. Check if user have enought points
 */
function reiscout_owner_info_access($nid) {
  $points = reiscout_owner_info_access_common($nid);

  if ($points === false || $points == 0) {
    drupal_set_message("Not enought points.", "error");
    return FALSE;
  }

  return TRUE;
}

/**
 * Access callback
 * 1. Check user roles
 * 2. Check if user have have purchased access to node
 * 3. Check if user have enought points
 */
function reiscout_owner_info_access_points($nid) {
  $points = reiscout_owner_info_access_common($nid);

  if ($points === false || $points != 0 ) {
    return FALSE;
  }

  return TRUE;
}

function reiscout_owner_info_access_common($nid) {
  global $user;
  $node = node_load($nid);

  // First, check "Owner postal address" field from current node.
  // Return FALSE if node already contains filled owner address field.
  if (!empty($node->field_owner_postal_address[LANGUAGE_NONE][0])) {
    return FALSE;
  }
  // Check if user is not anonymous
  if (!user_is_anonymous()) {
    // Check if user is not administrator
    if (!in_array('administrator', $user->roles)) {
      // If user is not author of node
      if ($user->uid != $node->uid) {
        // Check if user have purchased access to node
        $node_purchased = reiscout_property_commerce_is_node_purchased($node->nid,
            REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE,
            $user->uid);
        // If user have not purchased access to node return FALSE.
        if (!$node_purchased) {
          return FALSE;
        }
      }
    }
  } else {
    return FALSE;
  }

  // Check if user have enought points
  $points = userpoints_get_current_points($user->uid, TERM_ID_POINTS_OWNER_INFO);

  return $points;
}

/**
 * Fills Owner's Address field with info we received from the Connect2Data API.
 */
function reiscout_owner_info_save($node, $info) {
  $nw = entity_metadata_wrapper('node', $node);

  $nw->field_owner_postal_address->country = 'US';
  $nw->field_owner_postal_address->name_line = trim($info->PROPERTY_OWNER->attributes()->_OwnerName);
  $nw->field_owner_postal_address->thoroughfare = trim($info->PROPERTY_OWNER->attributes()->_MailingAddress);
  $nw->field_owner_postal_address->postal_code = trim($info->PROPERTY_OWNER->attributes()->_MailingPostalCode);

  if (preg_match('!(.+?)\s+([A-Z]{2})$!', $info->PROPERTY_OWNER->attributes()->_MailingCityAndState, $matches)) {
    $nw->field_owner_postal_address->locality = $matches[1];
    $nw->field_owner_postal_address->administrative_area = $matches[2];
  }

  $nw->save();
}

/**
 * Page callback for get_owner_info/%.
 * 1. Make call to connect2data_api.
 * 2. Decrease userpoint by one.
 */
function reiscout_owner_info_get_owner_callback($node) {
  global $user;

  // Build data that is needed for request to the Connect2Data API
  if (!$property_criteria = _reiscout_property_build_property_criteria($node)) {
    drupal_set_message("The information about property's owner cannot be requested because the property's address was not set.", 'error');
    // Return to the previous page
    drupal_goto();
  }

  // Make a request to the Connect2Data API to get full info about property
  if (!$info = connect2data_api_get_detailed_subject_report($property_criteria)) {
    drupal_set_message("An error occurred while requesting the information about property's owner.", 'error');
    // Return to the previous page
    drupal_goto();
  }

  reiscout_owner_info_save($node, $info);

  // ToDo: move pints decreasing to function.
  // Decrease points by one
  $params = array(
    'uid' => $user->uid,
    'points' => -1,
    'tid' => TERM_ID_POINTS_OWNER_INFO,
    'operation' => 'Used 1 point to get access to owner.',
  );
  userpoints_userpointsapi($params);

  drupal_set_message("Owner info received successfully.");
  // Return to previous page
  drupal_goto();
}

/**
 * Page callback for get_owner_info/%.
 * 1. Make call to connect2data_api.
 * 2. Decrease userpoint by one.
 */
function reiscout_owner_info_get_owner_drupalgap_callback($nid) {
  global $user;

  // Build data that is needed for request to the Connect2Data API
  if (!$property_criteria = _reiscout_property_build_property_criteria($nid)) {
    watchdog(
      'reiscout_owner_info',
      "The information about property's owner cannot be requested because the property's address was not set. Node ID: !nid",
      array('!nid' => $nid),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  // Make a request to the Connect2Data API to get full info about property
  if (!$info = connect2data_api_get_detailed_subject_report($property_criteria)) {
    watchdog(
      'reiscout_owner_info',
      "An error occurred while requesting the information about property's owner.",
      array(),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  reiscout_owner_info_save($nid, $info);

  // ToDo: move pints decreasing to function.
  // Decrease points by one
  $params = array(
    'uid' => $user->uid,
    'points' => -1,
    'tid' => TERM_ID_POINTS_OWNER_INFO,
    'operation' => 'Used 1 point to get access to owner.',
  );
  userpoints_userpointsapi($params);

  return TRUE;
}

/*
 * Form to buy an Owner Info
 */
function reiscout_owner_info_buy_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Buy Owner Info'),
    '#access' => true, // ToDo: place in form access callback all checks does it should appear
  );
  return $form;
}

function reiscout_owner_info_buy_form_submit($form, &$form_state) {
  // Todo: move reiscout_owner_info_get_owner_callback() stuff here
}

/**
 * Implements hook_node_view
 * 1. Check for amount of userpoints.
 * 2. Add action button to get info or to buy points as a commerce product.
 */
function reiscout_owner_info_node_view($node, $view_mode, $langcode) {
  dpm(__FUNCTION__);
  if ($view_mode == 'full' && $node->type == 'property') {
    // ToDo: move of these to form.
    // $node->content['buy_owner_info_form'] = drupal_get_form('reiscout_owner_info_buy_form');

    global $user;

    // First, check "Owner postal address" field from current node.
    // Do nothing if node already contains filled owner address field.
    if (!empty($node->field_owner_postal_address[LANGUAGE_NONE][0])) {
      return;
    }

    // Check if user is not anonymous
    if (!user_is_anonymous()) {
      // Check if user is not administrator
      if (!in_array('administrator', $user->roles)) {
        // If user is not author of node
        if ($user->uid != $node->uid) {
          // Check if user have purchased access to node
          $node_purchased = reiscout_property_commerce_is_node_purchased(
            $node->nid,
            REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE,
            $user->uid
          );
          // If user have not purchased access to node then return (do nothing).
          if (!$node_purchased) {
            return;
          }
        }
      }

      $link = '';

      // Prepare HTML-container for action buttons
      if (!isset($node->content['commerce-buttons'])) {
        $node->content['commerce-buttons'] = array(
          '#prefix' => '<div class="commerce-buttons">',
          '#suffix' => '</div>',
          '#markup' => '',
          '#weight' => -1,
        );
      }

      $points = userpoints_get_current_points($user->uid, TERM_ID_POINTS_OWNER_INFO);
      $button_name = 'Get Property Owner' . ' (' . $points . ' points left)';
      $callback_path = 'get_owner_info/' . $node->nid . '/';
      $rules_buy_link = 'buy_owner_info';

      $destination = drupal_get_destination();

      // If user have points for current action
      if ($points > 0) {
        $link = l($button_name, url($callback_path, array('query' => $destination, 'absolute' => TRUE), array('html' => TRUE)));
        $node->content['commerce-buttons']['#markup'] .= '<div class="callback-link">' . $link . '</div>';
      }
      // If user have not points
      else {
        $parameters = array();
        // Add link/button via rules to buy points as commerce product
        $rendered_link = rules_link_render($rules_buy_link, $node->nid, $destination, $parameters);
        if (!empty($rendered_link)) {
          $link = render($rendered_link);
          $node->content['commerce-buttons']['#markup'] .= $link;
        } else {
          $msg = t($rules_buy_link . ' rules link rendering failed.');
          if (in_array('administrator', $user->roles)) {
            drupal_set_message($msg, 'error');
          }
          watchdog('reiscout_owner_info', $msg, array(), WATCHDOG_ERROR);
        }
      }
    }
  }
}

/**
 * Implementation of hook_services_resources().
 */
function reiscout_owner_info_services_resources() {
  $file = array(
      'type'   => 'inc',
      'module' => 'reiscout_owner_info',
      'name'   => 'reiscout_owner_info.resource'
  );

  $resource = array(
    'ownerinfo' => array(
      'actions' => array(
        'getinfo' => array(
          'file' => $file,
          'help' => 'Get owner info',
          'callback' => '_reiscout_owner_info_get_info',
          'access callback' => 'reiscout_owner_info_resource_access',
          'access arguments' => array('getinfo'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('data' => 'nid'),
              'type' => 'int',
            ),
          ),
        ),
        'checkButtonShow' => array(
          'file' => $file,
          'help' => 'Checking view buttons',
          'callback' => '_reiscout_owner_info_get_show_button_info',
          'access callback' => 'reiscout_owner_info_resource_access',
          'access arguments' => array('checkButtonShow'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('data' => 'nid'),
              'type' => 'int',
            ),
          ),
        ),
      ),
    )
  );
  return $resource;
}

/**
 * Check user access
 *
 * @param string $type
 *  Action type.
 *
 * @param integer $nid
 *  Node nid.
 *
 * @return bool
 */
function reiscout_owner_info_resource_access($type, $nid) {
  // For both cases user must be logged in.
  if (user_is_anonymous()) {
    return false;
  }

  // For both cases the node being checked must be purchased.
  global $user;
  $node = node_load($nid);
  $node_purchased = reiscout_property_commerce_is_node_purchased($node->nid,
    REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE,
    $user->uid);
  if (!$node_purchased) {
    return false;
  }

  switch ($type) {
    case 'checkButtonShow':
      return true;

    case 'getinfo':
      // Check is user has points to requrst owner info.
      if (reiscout_owner_info_access_common($nid)) {
        return true;
      }
  }

  return false;
}
