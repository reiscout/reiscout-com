<?php

/**
 * @file
 * Reiscout Owner Info -
 * 1. Displays apropriate action buttons and make control over points
 * to get property owner info.
 * 2. Make call to connect2data_api
 */

// @todo: we used this module for pulling only information about a
// property owner, but now we use it for pulling information about
// all the Property node fields, so we should to refactor the module.

// Define constants
// ToDo: put term to feature useing uuid and replace id here to uuid.
define('TERM_ID_POINTS_OWNER_INFO', 1);

/**
 * Implements hook_menu().
 */
function reiscout_owner_info_menu() {
  // ToDo: repmove menu callback in favor or form.
  $items['get_owner_info/%node'] = array(
    'title' => 'Get Owner Info.',
    'page callback' => 'reiscout_owner_info_get_owner_callback',
    'page arguments' => array(1),
    'access callback' => 'reiscout_owner_info_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback
 * 1. Check user roles
 * 2. Check if user has purchased access to node
 * 3. Check if user has enough points
 */
function reiscout_owner_info_access($node) {
  global $user;

  if (!_reiscout_owner_info_is_user_can_buy($node)) {
    return FALSE;
  }

  // If user has not enough points
  if (0 >= userpoints_get_current_points($user->uid, TERM_ID_POINTS_OWNER_INFO)) {
    drupal_set_message(t('Not enough points.'), 'error');
    return FALSE;
  }

  return TRUE;
}

/**
 * Checks if a user may buy info about a property's owner.
 *
 * A user may buy info about a property's owner if:
 * - he is the property's author OR he has bought the property's address
 *   AND
 * - info about the property's owner has not been filled out yet.
 */
function _reiscout_owner_info_is_user_can_buy($node) {
  global $user;

  if (user_is_anonymous()) {
    return FALSE;
  }

  // If the "Owner postal address" field has been filled out
  // already, we do not need to do it again.
  if (_reiscout_property_is_owner_address_filled_by_nid($node->nid)) {
    return FALSE;
  }

  // If user is not an administrator
  if (!in_array('administrator', $user->roles)) {
    // And if he is not a property's author
    if ($user->uid != $node->uid) {
      // And he has not bought the property's address
      $node_purchased = reiscout_property_commerce_is_node_purchased($node->nid,
          REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE,
          $user->uid);
      if (!$node_purchased) {
        return FALSE;
      }
    }
  }

  return TRUE;
}

/**
 * Page callback for get_owner_info/%.
 * 1. Makes call to connect2data_api.
 * 2. Decreases the amount of user points by one.
 */
function reiscout_owner_info_get_owner_callback($node) {
  // Make a request to the Connect2Data API to get full info about property
  if (!$info = _reiscout_property_get_c2d_report_by_nid($node->nid, 'owner_info')) {
    drupal_set_message(t("An error occurred while requesting an information about the property's owner."), 'error');
    // Return to the previous page
    drupal_goto();
  }

  _reiscout_owner_info_save($node, $info);
  _reiscout_owner_info_decrease_user_points();

  drupal_set_message("Owner info received successfully.");
  // Return to previous page
  drupal_goto();
}

/**
 * Page callback for get_owner_info/%.
 * 1. Makes call to connect2data_api.
 * 2. Decreases the amount of user points by one.
 */
function reiscout_owner_info_get_owner_drupalgap_callback($nid) {
  // Make a request to the Connect2Data API to get full info about property
  if (!$info = _reiscout_property_get_c2d_report_by_nid($nid, 'owner_info')) {
    $message = 'An error occurred while requesting the information about owner of property !nid.';
    watchdog('reiscout_owner_info', $message, array('!nid' => $nid), WATCHDOG_ERROR);
    return FALSE;
  }

  _reiscout_owner_info_save($nid, $info);
  _reiscout_owner_info_decrease_user_points();

  return TRUE;
}

/*
 * Form to buy an Owner Info
 */
function reiscout_owner_info_buy_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Buy Owner Info'),
    '#access' => true, // ToDo: place in form access callback all checks does it should appear
  );
  return $form;
}

function reiscout_owner_info_buy_form_submit($form, &$form_state) {
  // Todo: move reiscout_owner_info_get_owner_callback() stuff here
}

/**
 * Implements hook_node_view
 * 1. Check for amount of userpoints.
 * 2. Add action button to get info or to buy points as a commerce product.
 */
function reiscout_owner_info_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $node->type == 'property') {
    // ToDo: move of these to form.
    // $node->content['buy_owner_info_form'] = drupal_get_form('reiscout_owner_info_buy_form');

    global $user;

    if (!_reiscout_owner_info_is_user_can_buy($node)) {
      return;
    }

    // Prepare HTML-container for action buttons
    if (!isset($node->content['commerce-buttons'])) {
      $node->content['commerce-buttons'] = array(
        '#prefix' => '<div class="commerce-buttons">',
        '#suffix' => '</div>',
        '#markup' => '',
        '#weight' => -1,
      );
    }

    $points = userpoints_get_current_points($user->uid, TERM_ID_POINTS_OWNER_INFO);
    $button_name = 'Get Full Property Data' . ' (' . $points . ' points left)';
    $callback_path = 'get_owner_info/' . $node->nid;
    $rules_buy_link = 'buy_owner_info';

    // If user has enough points for current action
    if ($points > 0) {
      $url = url($callback_path, array('query' => drupal_get_destination(), 'absolute' => TRUE), array('html' => TRUE));
      $link = l($button_name, $url);
      $node->content['commerce-buttons']['#markup'] .= '<div class="callback-link">' . $link . '</div>';
    }
    // If not
    else {
      // Add link/button via rules to buy points as a commerce product
      $rendered_link = rules_link_render($rules_buy_link, $node->nid, drupal_get_destination(), array());
      if ($rendered_link) {
        $link = drupal_render($rendered_link);
        $node->content['commerce-buttons']['#markup'] .= $link;
      }
      else {
        $msg = t($rules_buy_link . ' rules link rendering failed.');
        if (in_array('administrator', $user->roles)) {
          drupal_set_message($msg, 'error');
        }
        watchdog('reiscout_owner_info', $msg, array(), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Implementation of hook_services_resources().
 */
function reiscout_owner_info_services_resources() {
  $file = array(
    'type'   => 'inc',
    'module' => 'reiscout_owner_info',
    'name'   => 'reiscout_owner_info.resource'
  );

  $resource = array(
    'ownerinfo' => array(
      'actions' => array(
        'getinfo' => array(
          'file' => $file,
          'help' => "Requests info about a property's owner and saves it.",
          'callback' => '_reiscout_owner_info_get_info',
          'access callback' => '_reiscout_owner_info_resource_access',
          'access arguments' => array('getinfo'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'params',
              'type' => 'array',
              'source' => 'data',
              'optional' => FALSE,
              'description' => 'The nid of the Property node',
            ),
          ),
        ),
        'checkButtonShow' => array(
          'file' => $file,
          'help' => 'Checks which forms a user have an access to.',
          'callback' => '_reiscout_owner_info_get_show_button_info',
          'access callback' => '_reiscout_owner_info_resource_access',
          'access arguments' => array('checkButtonShow'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'params',
              'type' => 'array',
              'source' => 'data',
              'optional' => FALSE,
              'description' => 'The nid of the Property node',
            ),
          ),
        ),
      ),
    )
  );

  return $resource;
}

/**
 * Check user access
 *
 * @param string $type
 *  Action type.
 *
 * @param integer $nid
 *  Node nid.
 *
 * @return bool
 */
function _reiscout_owner_info_resource_access($op, $args = array()) {
  global $user;

  if ('checkButtonShow' == $op) {
    return TRUE;
  }

  $data = $args[0];
  $nid = $data['nid'];
  $node = node_load($nid);

  if (_reiscout_owner_info_is_user_can_buy($node)) {
    $points = userpoints_get_current_points($user->uid, TERM_ID_POINTS_OWNER_INFO);

    // If user has enough points
    if ($points > 0) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Fills Owner's Address field with info we received from the Connect2Data API.
 */
function _reiscout_owner_info_save($node, $info) {
  $nw = entity_metadata_wrapper('node', $node);

  $nw->field_owner_postal_address->country = 'US';
  $nw->field_owner_postal_address->name_line = trim($info->PROPERTY_OWNER->attributes()->_OwnerName);
  $nw->field_owner_postal_address->thoroughfare = trim($info->PROPERTY_OWNER->attributes()->_MailingAddress);
  $nw->field_owner_postal_address->postal_code = trim($info->PROPERTY_OWNER->attributes()->_MailingPostalCode);

  if (preg_match('!(.+?)\s+([A-Z]{2})$!', $info->PROPERTY_OWNER->attributes()->_MailingCityAndState, $matches)) {
    $nw->field_owner_postal_address->locality = $matches[1];
    $nw->field_owner_postal_address->administrative_area = $matches[2];
  }

  $nw->save();
}

/**
 * Decreases the amount of user points.
 */
function _reiscout_owner_info_decrease_user_points() {
  global $user;

  $params = array(
    'uid' => $user->uid,
    'points' => -1,
    'tid' => TERM_ID_POINTS_OWNER_INFO,
    'operation' => '1 point was used to get access to owner.',
  );

  userpoints_userpointsapi($params);
}
