<?php

class ReiscoutPropertyAddressIsNotSet extends Exception {}
class ReiscoutPropertyOwnerAddressIsNotSet extends Exception {}
class ReiscoutPropertyUserAddressIsNotSet extends Exception {}
class ReiscoutPropertyUserPhoneNumberIsNotSet extends Exception {}
class ReiscoutPropertyValueIsUnknown extends Exception {}
class ReiscoutPropertyGrossAreaIsUnknown extends Exception {}

define('REISCOUT_PROPERTY_NODE_TITLE_TO_CHANGE', 'Property #');
define('REISCOUT_PROPERTY_MESSAGE_TO_CHANGE', 'Property <em class="placeholder">Property #</em> has been created.');

/**
 * Implements hook_menu().
 */
function reiscout_property_menu() {
  $items['reiscout_property/csz_autocomplete'] = array(
    'title' => 'Autocomplete for address components used in addresses of all properties',
    'page callback' => 'reiscout_property_citystatezip_autocomplete',
    'access arguments' => array('access content'),
    'file' => 'reiscout_property.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['reiscout_property/ascsz_autocomplete'] = array(
    'title' => 'Autocomplete for address components used in addresses of all properties',
    'page callback' => 'reiscout_property_addressstreetcitystatezip_autocomplete',
    'access callback' => '_reiscout_misc_user_has_administrator_role',
    'file' => 'reiscout_property.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['reiscout_property/ascsz_my_properties_autocomplete'] = array(
    'title' => 'Autocomplete for address components used in addresses of properties added by the current user',
    'page callback' => 'reiscout_property_addressstreetcitystatezip_my_properties_autocomplete',
    'access callback' => 'user_is_logged_in',
    'file' => 'reiscout_property.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['reiscout_property/ascsz_purchased_leads_autocomplete'] = array(
    'title' => 'Autocomplete for address components used in addresses of properties purchased by the current user',
    'page callback' => 'reiscout_property_addressstreetcitystatezip_purchased_leads_autocomplete',
    'access callback' => 'user_is_logged_in',
    'file' => 'reiscout_property.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['reiscout_property/address_locality/drupalgap'] = array(
    'title' => 'Autocomplete for cities that is used in address of properties',
    'page callback' => 'reiscout_property_address_locality_autocomplete_drupalgap',
    'access arguments' => array('access content'),
    'file' => 'reiscout_property.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reiscout_property_form_property_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_case_file_date']['#states'] = array(
    'visible' => array(':input[name="field_source[und]"]' => array('value' => 1)),
    'required' => array(':input[name="field_source[und]"]' => array('value' => 1)),
  );

  $form['#attached']['css'][] = array(
    'data' => '#edit-field-owner-postal-address .form-item-field-owner-postal-address-und-0-country {display: none}',
    'type' => 'inline',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reiscout_property_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if ('property' == $form['#node']->type) {
    $form['#submit'][] = 'reiscout_property_node_delete_confirm_submit';
  }
}

/**
 * Form submission handler for 'node_delete_confirm' form.
 *
 * Redirects a user to 'My Properties' page after a node deletion.
 */
function reiscout_property_node_delete_confirm_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'my-properties';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reiscout_property_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // 'Property Listing'
  if ('views-exposed-form-property-listing-page' == $form['#id']) {
    $role_admin = user_role_load_by_name('administrator');
    if (user_has_role($role_admin->rid)) {
      _reiscout_property_attach_addresscitystatezip_field($form, 'reiscout_property/ascsz_autocomplete');
    }
    else {
      _reiscout_property_attach_citystatezip_field($form, 'reiscout_property/csz_autocomplete');
    }
    array_unshift($form['#submit'], 'reiscout_property_property_listing_views_exposed_form_submit');
  }
  // 'My Properties'
  elseif ('views-exposed-form-property-listing-my-properties' == $form['#id']) {
    _reiscout_property_attach_addresscitystatezip_field($form, 'reiscout_property/ascsz_my_properties_autocomplete');
    array_unshift($form['#submit'], 'reiscout_property_property_listing_views_exposed_form_submit');
  }
  // 'Purchased Leads'
  elseif ('views-exposed-form-reiscout-property-commerce-purchased-nodes-page' == $form['#id']) {
    _reiscout_property_attach_addresscitystatezip_field($form, 'reiscout_property/ascsz_purchased_leads_autocomplete');
    array_unshift($form['#submit'], 'reiscout_property_property_listing_views_exposed_form_submit');
  }
}

/**
 * Form submission handler for views_exposed_form on 'Property Listing' page.
 *
 * @see reiscout_property_form_views_exposed_form_alter()
 */
function reiscout_property_property_listing_views_exposed_form_submit($form, &$form_state) {
  if (isset($form_state['values']['citystatezip'])) {
    $search = $form_state['values']['citystatezip'];

    // A user has entered a ZIP code
    if (ctype_digit($search) && 5 >= strlen($search)) {
      $form_state['values']['zip'] = $search;
    }
    // A user has entered a city and state
    elseif (preg_match('!^([a-zA-Z\s]+) ([A-Z]{2})$!', $search, $matches)) {
      $form_state['values']['city'] = $matches[1];
      $form_state['values']['state'] = $matches[2];
    }
    // A user has entered a state
    elseif (preg_match('!^[a-zA-Z\s]+$!', $search)) {
      if ($state_code = PropertyAddressSuggestion::getStateCodeByName($search)) {
        $form_state['values']['state'] = $state_code;
      }
    }
  }
  elseif (isset($form_state['values']['addresscitystatezip'])) {
    $search = $form_state['values']['addresscitystatezip'];

    // A user has entered a ZIP code
    if (ctype_digit($search) && 5 >= strlen($search)) {
      $form_state['values']['zip'] = $search;
    }
    // A user has entered a city and state
    elseif (preg_match('!^([a-zA-Z\s]+) ([A-Z]{2})$!', $search, $matches)) {
      $form_state['values']['city'] = $matches[1];
      $form_state['values']['state'] = $matches[2];
    }
    // A user has entered a street, city and state
    elseif (preg_match('!^([a-zA-Z\s]+), ([a-zA-Z\s]+) ([A-Z]{2})$!', $search, $matches)) {
      $form_state['values']['address'] = $matches[1];
      $form_state['values']['city'] = $matches[2];
      $form_state['values']['state'] = $matches[3];
    }
    // A user has entered a state
    elseif (preg_match('!^[a-zA-Z\s]+$!', $search)) {
      if ($state_code = PropertyAddressSuggestion::getStateCodeByName($search)) {
        $form_state['values']['state'] = $state_code;
      }
    }
    // A user has entered an address, city and state
    elseif (preg_match('!^([0-9]+ [a-zA-Z\s]+), ([a-zA-Z\s]+) ([A-Z]{2})$!', $search, $matches)) {
      $form_state['values']['address'] = $matches[1];
      $form_state['values']['city'] = $matches[2];
      $form_state['values']['state'] = $matches[3];
    }
  }
}

/**
 * Implements hook_node_validate().
 *
 * If a user wants to place a node to the marketplace, checks its address for
 * uniqueness within the marketplace. Otherwise, checks its address for
 * uniqueness within the user's account.
 *
 * If at least one component of the address of the owner of a property is filled,
 * checks whether all the required components of the address are filled.
 */
function reiscout_property_node_validate($node, $form, &$form_state) {
  if ('property' != $node->type) {
    return;
  }

  // If a node is being deleted, we do not need make any checks.
  if ('Delete' == $form_state['values']['op']) {
    return;
  }

  if ($node->field_address[LANGUAGE_NONE][0]['thoroughfare']) {
    $node->field_address[LANGUAGE_NONE][0]['thoroughfare'] = _reiscout_misc_standardize_address_thoroughfare($node->field_address[LANGUAGE_NONE][0]['thoroughfare']);
  }

  if ($node->field_owner_postal_address[LANGUAGE_NONE][0]['thoroughfare']) {
    $node->field_owner_postal_address[LANGUAGE_NONE][0]['thoroughfare'] = _reiscout_misc_standardize_address_thoroughfare($node->field_owner_postal_address[LANGUAGE_NONE][0]['thoroughfare']);
  }

  $nw = entity_metadata_wrapper('node', $node);

  if ($nw->field_address->value()) {
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'property')
      ->fieldCondition('field_address', 'thoroughfare', $nw->field_address->thoroughfare->value())
      ->fieldCondition('field_address', 'premise', $nw->field_address->premise->value())
      ->fieldCondition('field_address', 'locality', $nw->field_address->locality->value())
      ->fieldCondition('field_address', 'administrative_area', $nw->field_address->administrative_area->value());

    // We do not want to compare a node with itself
    if ($node->nid) {
      $query->propertyCondition('nid', $node->nid, '!=');
    }

    // If a user wants to place this node to the marketplace, we need check its address for uniqueness within the marketplace
    if ($nw->field_place_on_marketplace->value()) {
      $query->fieldCondition('field_place_on_marketplace', 'value', 1);

      if ($result = $query->execute()) {
        $nodes = array_keys($result['node']);
        $nid = array_shift($nodes);
        $t_args = array('!node_url' => url('/node/' . $nid));
        $msg = t('A <a href="!node_url">property with the same address</a> has already been placed on our marketplace. <br>If you want to add the property for yourself, you must uncheck the <strong>Place this lead on the marketplace</strong> checkbox.', $t_args);
        form_set_error('field_address', $msg);
      }
    }
    // Otherwise, we need check its address for uniqueness within the user's account
    else {
      $query->propertyCondition('uid', $node->uid);

      if ($result = $query->execute()) {
        $nodes = array_keys($result['node']);
        $nid = array_shift($nodes);
        $t_args = array('!node_url' => url('/node/' . $nid));
        $msg = t('You have already added a <a href="!node_url">property with the same address</a>.', $t_args);
        form_set_error('field_address', $msg);
      }
    }
  }

  if ($nw->field_owner_postal_address->value()) {
    // If at least one component of the address of the owner of a property is filled
    if ($nw->field_owner_postal_address->first_name->value()
     || $nw->field_owner_postal_address->last_name->value()
     || $nw->field_owner_postal_address->organisation_name->value()
     || $nw->field_owner_postal_address->thoroughfare->value()
     || $nw->field_owner_postal_address->premise->value()
     || $nw->field_owner_postal_address->locality->value()
     || $nw->field_owner_postal_address->administrative_area->value()
     || $nw->field_owner_postal_address->postal_code->value()) {
      // Checks whether the owner's name or the name of a company is filled
      if ((!$nw->field_owner_postal_address->first_name->value()
        || !$nw->field_owner_postal_address->last_name->value())
        && !$nw->field_owner_postal_address->organisation_name->value()) {
        $msg = t("Please fill out either <strong>First name</strong> and <strong>Last name</strong> fields or <strong>Company</strong> field of the owner's address.");
        form_set_error('field_owner_postal_address][und][0][first_name', $msg);
        form_set_error('field_owner_postal_address][und][0][last_name');
        form_set_error('field_owner_postal_address][und][0][organisation_name');
      }

      // Check whether all the required components of the address are filled
      if (!$nw->field_owner_postal_address->thoroughfare->value()) {
        $msg = t("Please fill out <strong>Address 1</strong> field of the owner's address.");
        form_set_error('field_owner_postal_address][und][0][thoroughfare', $msg);
      }

      if (!$nw->field_owner_postal_address->locality->value()) {
        $msg = t("Please fill out <strong>City</strong> field of the owner's address.");
        form_set_error('field_owner_postal_address][und][0][locality', $msg);
      }

      if (!$nw->field_owner_postal_address->administrative_area->value()) {
        $msg = t("Please fill out <strong>State</strong> field of the owner's address.");
        form_set_error('field_owner_postal_address][und][0][administrative_area', $msg);
      }

      if (!$nw->field_owner_postal_address->postal_code->value()) {
        $msg = t("Please fill out <strong>ZIP code</strong> field of the owner's address.");
        form_set_error('field_owner_postal_address][und][0][postal_code', $msg);
      }
    }
  }

  // If the value of Source field is 'Court Case', check if 'File Date' field is filled out
  if (1 == $nw->field_source->value() && !$nw->field_case_file_date->value()) {
    $msg = t("Please fill out <strong>File Date</strong> field.");
    form_set_error('field_case_file_date', $msg);
  }
}

/**
 * Implements hook_node_presave().
 */
function reiscout_property_node_presave($node) {
  if ('property' != $node->type) {
    return;
  }

  $nw = entity_metadata_wrapper('node', $node);

  $nw->field_address->thoroughfare = _reiscout_misc_standardize_address_thoroughfare($nw->field_address->thoroughfare->value());

  if (Property::isOwnerAddressFilledOut($nw->field_owner_postal_address)) {
    $nw->field_owner_postal_address->thoroughfare = _reiscout_misc_standardize_address_thoroughfare($nw->field_owner_postal_address->thoroughfare->value());
  }

  if ($nw->is_new->value()) {
    if (Property::isOwnerAddressFilledOut($nw->field_owner_postal_address)) {
      $nw->field_owner_status = _reiscout_property_determine_owner_status($nw->field_address, $nw->field_owner_postal_address);
    }
  }
  else {
    $nwo = entity_metadata_wrapper('node', $node->original);

    // If an owner address has been removed
    if (!Property::isOwnerAddressFilledOut($nw->field_owner_postal_address)) {
      $nw->field_owner_status = null;
    }
    // If either a property address or owner address have been changed
    elseif (_reiscout_property_is_address_changed($nwo->field_address, $nw->field_address)
         || _reiscout_property_is_owner_address_changed($nwo->field_owner_postal_address, $nw->field_owner_postal_address)) {
      $nw->field_owner_status = _reiscout_property_determine_owner_status($nw->field_address, $nw->field_owner_postal_address);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function reiscout_property_node_update($node) {
  if ('property' != $node->type) {
    return;
  }

  // We use 'Automatic Entity Labels' module to automatic title creation for
  // a Property node. The module uses 'hook_exit' hook to generating a node
  // title and updating the node. But 'Node' module have already saved the node
  // with token title and set a message about it. So here we look for the
  // message and change it.
  if (module_exists('auto_entitylabel')) {
    if (REISCOUT_PROPERTY_NODE_TITLE_TO_CHANGE == $node->original->title
      && REISCOUT_PROPERTY_NODE_TITLE_TO_CHANGE != $node->title) {
      if (!empty($_SESSION['messages']['status'])) {
        for ($i = 0, $len = count($_SESSION['messages']['status']); $i < $len; ++$i) {
          if (REISCOUT_PROPERTY_MESSAGE_TO_CHANGE == $_SESSION['messages']['status'][$i]) {
            $_SESSION['messages']['status'][$i] = t('Property %title has been created.', array('%title' => $node->title));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_access_records().
 *
 * We want to force these access rules:
 * - a user, who is the author of the node, can view the node;
 * - all the other users can view the node only if it is published and the
 *   'Place this lead on the marketplace' field of the node is set to true.
 */
function reiscout_property_node_access_records($node) {
  if ('property' == $node->type) {
    $grants = array();

    // We set GID to $node->uid here, because we want to grant an access for
    // a user, who is the author of the node. But we do not want to grant an
    // access for a super user here, because he already has an access.
    if (1 != $node->uid) {
      $grants[] = array(
        'realm' => 'reiscout_property',
        'gid' => $node->uid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }

    // We set GID to 0 here for all the other users
    $nw = entity_metadata_wrapper('node', $node);
    if ($nw->status->value() && $nw->field_place_on_marketplace->value()) {
      $grants[] = array(
        'realm' => 'reiscout_property',
        'gid' => 0,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }

    return $grants;
  }
}

/**
 * Implements hook_node_grants().
 */
function reiscout_property_node_grants($account, $op) {
  $grants = array();

  if ('view' == $op) {
    // First, we want to check if a user has an access using GID 0
    $grants['reiscout_property'][] = 0;

    // Then, if a user is logged in, we want to check if he has an
    // access as the author of the node, using his UID as a GID
    if ($account->uid) {
      $grants['reiscout_property'][] = $account->uid;
    }
  }

  return $grants;
}

/**
 * Implements hook_field_access().
 */
function reiscout_property_field_access($op, $field, $entity_type, $entity, $account) {
  if ('node' == $entity_type && !empty($entity->type) && 'property' == $entity->type) {
    if ('view' == $op) {
      if ('field_market_value' == $field['field_name']) {
        $nw = entity_metadata_wrapper('node', $entity);
        if ($nw->field_appraised_value->value()) {
          return FALSE;
        }
      }
      else if ('field_assessed_value' == $field['field_name']) {
        $nw = entity_metadata_wrapper('node', $entity);
        if ($nw->field_appraised_value->value() || $nw->field_market_value->value()) {
          return FALSE;
        }
      }
    }
    else if ('edit' == $op) {
      // Fields that can be edited by a user with an administrator role only
      $fields_editable_by_admin = array(
        'field_source',
        'field_case_file_date',
        'field_data_locked',
        'field_data_quality_tags',
      );

      // Fields that can be edited by the superuser only
      $fields_editable_by_root = array(
        // This field is set in the app
        'field_geo_position',
        // We want the nodes only to be seen by the owner.
        // @todo: should 'Place this lead on the marketplace' field be deleted?
        'field_place_on_marketplace',
        // These fields are set automatically
        'field_fips_county_code',
        'field_owner_status',
        'field_zillow_page_url',
      );

      // A list of a node's fields that a user is allowed to edit
      // after the node has been purchased
      $fields_to_edit_node_was_purchased = array(
        'field_image',
        'body',
        'field_owner_phone',
        'field_repairs_price',
        'field_arv',
        'field_under_contract',
      );

      // A list of a node's fields that a user is allowed to edit
      // after the node has been filled with data from CL
      $fields_to_edit_node_was_pulled = array(
        'field_image',
        'body',
        'field_owner_phone',
        'field_repairs_price',
        'field_arv',
        'field_under_contract',
      );

      $role_admin = user_role_load_by_name('administrator');

      if (in_array($field['field_name'], $fields_editable_by_admin)) {
        return user_has_role($role_admin->rid, $account);
      }

      if (in_array($field['field_name'], $fields_editable_by_root)) {
        return 1 == $account->uid;
      }

      // If a node is being edited
      if (isset($entity->nid)) {
        if (_reiscout_property_lead_has_been_purchased($entity->nid)) {
          if (!in_array($field['field_name'], $fields_to_edit_node_was_purchased)) {
            if (!user_has_role($role_admin->rid, $account)) {
              return FALSE;
            }
          }
        }

        $nw = entity_metadata_wrapper('node', $entity);
        if ($nw->field_data_locked->value()) {
          if (!in_array($field['field_name'], $fields_to_edit_node_was_pulled)) {
            if (!user_has_role($role_admin->rid, $account)) {
              return FALSE;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_access().
 */
function reiscout_property_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if ('property' == $type) {
    if ('delete' == $op) {
      if (is_object($node)) {
        if ($account->uid == $node->uid) {
          if (_reiscout_property_lead_has_been_purchased($node->nid)) {
            return NODE_ACCESS_DENY;
          }
        }
      }
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_field_extra_fields().
 */
function reiscout_property_field_extra_fields() {
  $return = array();

  $return['node']['property'] = array(
    'display' => array(
      'address' => array(
        'label' => t('Public address'),
        'description' => t('Address that is available to all the users.'),
        'weight' => -1,
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_node_view().
 */
function reiscout_property_node_view($node, $view_mode, $langcode) {
  if ('full' == $view_mode && 'property' == $node->type) {
    // If a user has not an access to view a full address of a property,
    // show him a public address (a city and a ZIP code)
    if (!$node->content['field_address']['#access']) {
      $node->content['address'] = array(
        '#prefix' => '<div class="field address"><div class="field-label">Address:</div>',
        '#markup' => $node->_address,
        '#suffix' => '</div>',
      );
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function reiscout_property_entity_load($entities, $type) {
  if ('node' == $type) {
    foreach ($entities as $entity) {
      if ('property' == $entity->type) {
        $nw = entity_metadata_wrapper('node', $entity);
        $entity->_address = $nw->field_address->locality->value() . ', ' . $nw->field_address->postal_code->value();
        // If an image was not uploaded for the 'Photo' field of the Property
        // node, we set a URL of the default image that will be used in the app.
        // See reiscout_property_entity_post_render_field() function in
        // reiscout_property.js module.
        if (!$entity->field_image) {
          $field_info_instance = field_info_instances('node', 'property');
          if ($fid = $field_info_instance['field_image']['settings']['default_image']) {
            if ($file = file_load($fid)) {
              $entity->_default_field_image_uri = $file->uri;
            };
          }
        }
      }
    }
  }
}

/**
 * Attaches 'citystatezip' field to a views_exposed_form form.
 */
function _reiscout_property_attach_citystatezip_field(&$form, $autocomplete_path) {
  $form['citystatezip'] = array(
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => '',
    '#attributes' => array('placeholder' => t('City, State or ZIP')),
    '#autocomplete_path' => $autocomplete_path,
  );

  $field_info = array(
    'value' => 'citystatezip',
    'label' => '',
    'description' => '',
  );
  $form['#info'] = array('filter-citystatezip' => $field_info) + $form['#info'];
}

/**
 * Attaches 'addresscitystatezip' field to a views_exposed_form form.
 */
function _reiscout_property_attach_addresscitystatezip_field(&$form, $autocomplete_path) {
  $form['addresscitystatezip'] = array(
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => '',
    '#attributes' => array('placeholder' => t('Address, Street, City, State or ZIP')),
    '#autocomplete_path' => $autocomplete_path,
  );

  $field_info = array(
    'value' => 'addresscitystatezip',
    'label' => '',
    'description' => '',
  );
  $form['#info'] = array('filter-addresscitystatezip' => $field_info) + $form['#info'];
}

/**
 * Builds data that is needed for request to the Connect2Data API.
 */
function _reiscout_property_build_property_criteria($nid) {
  $address = _reiscout_property_get_address_by_nid($nid);

  return array(
    'street_address' => $address->thoroughfare->value(),
    'city' => $address->locality->value(),
    'state' => $address->administrative_area->value(),
    'postal_code' => $address->postal_code->value(),
  );
}

/**
 * Makes a request to the Connect2Data API and returns full info about property.
 */
function _reiscout_property_get_c2d_report_by_nid($nid, $request_reason) {
  try {
    $property_criteria = _reiscout_property_build_property_criteria($nid);
    return connect2data_api_get_detailed_subject_report($property_criteria, $request_reason);
  }
  catch (Exception $e) {
    watchdog_exception('reiscout_property', $e);
    return FALSE;
  }
}

/**
 * Fills property's fields with data from Onboard Property API.
 *
 * Makes a request to the Onboard Property API for property data
 * and fills property's fields with the data.
 */
function reiscout_property_fill_with_onboard_property_data_by_nid($nid, $request_reason) {
  try {
    $address = _reiscout_property_get_address_by_nid($nid);
    $address1 = $address->thoroughfare->value();
    $address2 = $address->locality->value() . ', ' . $address->administrative_area->value() . ' ' . $address->postal_code->value();
    if ($data = onboard_property_api_get_data($address1, $address2, $request_reason)) {
      _reiscout_property_fill_with_onboard_property_data($nid, $data);
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  catch (Exception $e) {
    watchdog_exception('reiscout_property', $e);
    return FALSE;
  }
}

/**
 * Fills property's fields with data from Onboard Property API.
 */
function _reiscout_property_fill_with_onboard_property_data($nid, $data) {
  $nw = entity_metadata_wrapper('node', $nid);

  if ($data->assessment->appraised->apprttlvalue) {
    $nw->field_appraised_value = $data->assessment->appraised->apprttlvalue / 1000;
  }

  if ($data->assessment->market->mktttlvalue) {
    $nw->field_market_value = $data->assessment->market->mktttlvalue / 1000;
  }

  if ($data->sale->amount->saleamt) {
    $nw->field_last_sale_price = $data->sale->amount->saleamt / 1000;
  }

  if ($data->sale->amount->salerecdate) {
    $nw->field_last_sale_date = strtotime($data->sale->amount->salerecdate);
  }

  if (isset($data->mortgage->lender->lastname)) {
    $nw->field_mortgage_company = $data->mortgage->lender->lastname;
  }

  // If an owner is a corporation or business
  if (isset($data->owner->corporateindicator)) {
    $nw->field_owner_postal_address->organisation_name = $data->owner->owner1->firstnameandmi;
  }
  else {
    $nw->field_owner_postal_address->name_line = NULL;
    $nw->field_owner_postal_address->first_name = $data->owner->owner1->firstnameandmi;
    $nw->field_owner_postal_address->last_name = $data->owner->owner1->lastname;
  }

  $nw->field_owner_postal_address->country = 'US';

  // If an owner mailing address and the property address are not equal
  if (isset($data->owner->mailingaddressoneline)) {
    if (preg_match('!(.+), (.+?) ([A-Z]{2}) (\d{5})!', $data->owner->mailingaddressoneline, $matches)) {
      $nw->field_owner_postal_address->thoroughfare = $matches[1];
      $nw->field_owner_postal_address->locality = $matches[2];
      $nw->field_owner_postal_address->administrative_area = $matches[3];
      $nw->field_owner_postal_address->postal_code = $matches[4];
    }
  }
  else {
    $nw->field_owner_postal_address->thoroughfare = $data->address->line1;
    $nw->field_owner_postal_address->locality = $data->address->locality;
    $nw->field_owner_postal_address->administrative_area = $data->address->countrySubd;
    $nw->field_owner_postal_address->postal_code = $data->address->postal1;
  }

  if ($data->building->size->bldgsize) {
    $nw->field_gross_area = $data->building->size->bldgsize;
  }

  if ($data->building->rooms->beds) {
    $nw->field_bedrooms = $data->building->rooms->beds;
  }

  if ($data->building->rooms->bathsfull) {
    $nw->field_full_baths = $data->building->rooms->bathsfull;
  }

  if ($data->building->rooms->bathshalf) {
    $nw->field_half_baths = $data->building->rooms->bathshalf;
  }

  if ($data->summary->yearbuilt) {
    $nw->field_year_built = $data->summary->yearbuilt;
  }

  if ($data->building->summary->yearbuilteffective) {
    $nw->field_effective_year_built = $data->building->summary->yearbuilteffective;
  }

  if ($data->lot->lotsize1) {
    $nw->field_lot_area_acres = $data->lot->lotsize1;
  }

  if ($data->area->countyuse1) {
    $nw->field_zoning = $data->area->countyuse1;
  }

  // Calculate an equity percentage estimate
  $property_value = $data->assessment->appraised->apprttlvalue ? $data->assessment->appraised->apprttlvalue : $data->assessment->market->mktttlvalue;
  $mortgage_date = $data->mortgage->date ? $data->mortgage->date : $data->sale->amount->salerecdate;
  if ($epe = reiscout_equity_percentage_calculate($property_value, $mortgage_date, $data->mortgage->amount, $data->mortgage->term)) {
    $nw->field_ep_calculated = $epe;
  }
  else {
    $message = 'EPE cannot be calculated for the property !nid.';
    watchdog('reiscout_property', $message, array('!nid' => $nid), WATCHDOG_ERROR);
  }

  // Add the 'Full info' tag
  _reiscout_data_quality_tags_add($nw->field_data_quality_tags, 'full_info');

  // Lock the Property node fields from editing
  $nw->field_data_locked = TRUE;
  $nw->save();
}

/**
 * Updates Property node fields with info we received from the Connect2Data API.
 */
function _reiscout_property_update_fields($node, $info) {
  $nw = entity_metadata_wrapper('node', $node);

  // 'Assessed Value' field
  if ($assessed_value = $info->_PROPERTY_TAX->attributes()->_TotalAssessedValueAmount->__toString()) {
    $nw->field_assessed_value = $assessed_value / 1000;
  }

  // 'Last Sale Price' field
  if ($last_sale_price = $info->_PROPERTY_HISTORY->_SALES_HISTORY->attributes()->_LastSalesPriceAmount->__toString()) {
    $nw->field_last_sale_price = $last_sale_price / 1000;
  }

  // 'Last Sale Date' field
  if ($last_sale_date = $info->_PROPERTY_HISTORY->_SALES_HISTORY->attributes()->_LastSalesDate->__toString()) {
    $nw->field_last_sale_date = strtotime($last_sale_date);
  }

  // 'Owner Address' field
  $nw->field_owner_postal_address->country = 'US';
  $nw->field_owner_postal_address->name_line = $info->PROPERTY_OWNER->attributes()->_OwnerName->__toString();
  $nw->field_owner_postal_address->thoroughfare = $info->PROPERTY_OWNER->attributes()->_MailingAddress->__toString();
  $nw->field_owner_postal_address->postal_code = $info->PROPERTY_OWNER->attributes()->_MailingPostalCode->__toString();

  if (preg_match('!(.+?)\s+([A-Z]{2})$!', $info->PROPERTY_OWNER->attributes()->_MailingCityAndState->__toString(), $matches)) {
    $nw->field_owner_postal_address->locality = $matches[1];
    $nw->field_owner_postal_address->administrative_area = $matches[2];
  }

  // 'Gross Area' field
  if ($gross_area = $info->_PROPERTY_CHARACTERISTICS->_IMPROVEMENTS->_ROOM_COUNT->attributes()->_GrossLivingAreaSquareFeetNumber->__toString()) {
    $nw->field_gross_area = $gross_area;
  }

  // 'Bedrooms' field
  if ($bedrooms = $info->_PROPERTY_CHARACTERISTICS->_IMPROVEMENTS->_ROOM_COUNT->attributes()->_TotalBedroomsCount->__toString()) {
    $nw->field_bedrooms = $bedrooms;
  }

  // 'Full Baths' field
  if ($full_baths = $info->_PROPERTY_CHARACTERISTICS->_IMPROVEMENTS->_ROOM_COUNT->attributes()->_TotalFullBathsCount->__toString()) {
    $nw->field_full_baths = $full_baths;
  }

  // 'Half Baths' field
  if ($half_baths = $info->_PROPERTY_CHARACTERISTICS->_IMPROVEMENTS->_ROOM_COUNT->attributes()->_TotalHalfBathsCount->__toString()) {
    $nw->field_half_baths = $half_baths;
  }

  // 'Year Built' field
  if ($year_built = $info->_PROPERTY_CHARACTERISTICS->_IMPROVEMENTS->_GENERAL_DESCRIPTION->attributes()->_YearBuiltDateIdentifier->__toString()) {
    $nw->field_year_built = $year_built;
  }

  // 'Effective Year Built' field
  if ($effective_year_built = $info->_PROPERTY_CHARACTERISTICS->_IMPROVEMENTS->_GENERAL_DESCRIPTION->attributes()->_EffectiveYearBuiltDateIdentifier->__toString()) {
    $nw->field_effective_year_built = $effective_year_built;
  }

  // 'Lot Area' field
  if ($lot_area_acres = $info->_PROPERTY_CHARACTERISTICS->_SITE->_DIMENSIONS->attributes()->_LotAreaAcresNumber->__toString()) {
    $nw->field_lot_area_acres = $lot_area_acres;
  }

  // 'Mortgage Company' field
  if ($mortgage_company = $info->_PROPERTY_HISTORY->_SALES_HISTORY->attributes()->_LenderName->__toString()) {
    $nw->field_mortgage_company = $mortgage_company;
  }

  // 'Zoning' field
  if ($zoning = $info->_PROPERTY_CHARACTERISTICS->_SITE->_ZONING->attributes()->_ClassificationIdentifier->__toString()) {
    $nw->field_zoning = $zoning;
  }

  // Add the 'Full info' tag
  _reiscout_data_quality_tags_add($nw->field_data_quality_tags, 'full_info');

  // Lock the Property node fields from editing
  $nw->field_data_locked = TRUE;
  $nw->save();

  // Calculate the 'Equity Percentage Estimate' field
  reiscout_equity_percentage_recalculate_in_property_by_nid($nw->nid->value());
}

/**
 * Checks if an address of a property has been filled out.
 */
function _reiscout_property_is_address_filled_by_nid($nid) {
  $nw = entity_metadata_wrapper('node', $nid);

  if (!$nw->field_address->value()) {
    return FALSE;
  }

  return $nw->field_address->thoroughfare->value()
    && $nw->field_address->locality->value()
    && $nw->field_address->administrative_area->value()
    && $nw->field_address->postal_code->value();
}

/**
 * Checks if the new property address is different from the old one.
 */
function _reiscout_property_is_address_changed($old_address, $new_address) {
  return $old_address->thoroughfare->value() != $new_address->thoroughfare->value()
    || $old_address->locality->value() != $new_address->locality->value()
    || $old_address->administrative_area->value() != $new_address->administrative_area->value()
    || $old_address->postal_code->value() != $new_address->postal_code->value();
}

/**
 * Returns an address of a property.
 */
function _reiscout_property_get_address_by_nid($nid) {
  if (!_reiscout_property_is_address_filled_by_nid($nid)) {
    $msg = t('An address of a property !nid is empty or incomplete.', array('!nid' => $nid));
    throw new ReiscoutPropertyAddressIsNotSet($msg);
  }

  $nw = entity_metadata_wrapper('node', $nid);

  return $nw->field_address;
}

/**
 * Checks if an address of a property's owner has been filled out.
 */
function _reiscout_property_is_owner_address_filled_by_nid($nid) {
  $nw = entity_metadata_wrapper('node', $nid);

  if (!$nw->field_owner_postal_address->value()) {
    return FALSE;
  }

  $is_name_filled = ($nw->field_owner_postal_address->first_name->value()
    && $nw->field_owner_postal_address->last_name->value())
    || $nw->field_owner_postal_address->organisation_name->value();

  return $is_name_filled
    && $nw->field_owner_postal_address->thoroughfare->value()
    && $nw->field_owner_postal_address->locality->value()
    && $nw->field_owner_postal_address->administrative_area->value()
    && $nw->field_owner_postal_address->postal_code->value();
}

/**
 * Checks if the new owner address is different from the old one.
 */
function _reiscout_property_is_owner_address_changed($old_address, $new_address) {
  return $old_address->first_name->value() != $new_address->first_name->value()
    || $old_address->last_name->value() != $new_address->last_name->value()
    || $old_address->organisation_name->value() != $new_address->organisation_name->value()
    || $old_address->thoroughfare->value() != $new_address->thoroughfare->value()
    || $old_address->locality->value() != $new_address->locality->value()
    || $old_address->administrative_area->value() != $new_address->administrative_area->value()
    || $old_address->postal_code->value() != $new_address->postal_code->value();
}

/**
 * Returns an address of a property's owner.
 */
function _reiscout_property_get_owner_address_by_nid($nid) {
  if (!_reiscout_property_is_owner_address_filled_by_nid($nid)) {
    $msg = t('An address of a property !nid owner is empty or incomplete.', array('!nid' => $nid));
    throw new ReiscoutPropertyOwnerAddressIsNotSet($msg);
  }

  $nw = entity_metadata_wrapper('node', $nid);

  return $nw->field_owner_postal_address;
}

/**
 * Returns the name of a property's owner.
 */
function _reiscout_property_get_owner_name_by_nid($nid) {
  if (!_reiscout_property_is_owner_address_filled_by_nid($nid)) {
    $msg = t('An address of a property !nid owner is empty or incomplete.', array('!nid' => $nid));
    throw new ReiscoutPropertyOwnerAddressIsNotSet($msg);
  }

  $nw = entity_metadata_wrapper('node', $nid);

  if ($nw->field_owner_postal_address->organisation_name->value()) {
    $owner_name = $nw->field_owner_postal_address->organisation_name->value();
  }
  else {
    $owner_name = $nw->field_owner_postal_address->first_name->value()
                . ' '
                . $nw->field_owner_postal_address->last_name->value();
  }

  return $owner_name;
}

/**
 * Given a property NID, returns the property value.
 */
function _reiscout_property_get_value_by_nid($nid) {
  $nw = entity_metadata_wrapper('node', $nid);

  if ($nw->field_appraised_value->value()) {
    $property_value = $nw->field_appraised_value->value() * 1000;
  }
  elseif ($nw->field_market_value->value()) {
    $property_value = $nw->field_market_value->value() * 1000;
  }
  else {
    $msg = t('The value of the property !nid is unknown.', array('!nid' => $nid));
    throw new ReiscoutPropertyValueIsUnknown($msg);
  }

  return $property_value;
}

/**
 * Given a property NID, returns the gross area of the property.
 */
function _reiscout_property_get_gross_area_by_nid($nid) {
  $nw = entity_metadata_wrapper('node', $nid);

  if (!$nw->field_gross_area->value()) {
    $msg = t('The gross area of the property !nid is unknown.', array('!nid' => $nid));
    throw new ReiscoutPropertyGrossAreaIsUnknown($msg);
  }

  return $nw->field_gross_area->value();
}

/**
 * Checks if an address of a user has been filled out.
 */
function _reiscout_property_is_user_address_filled($uid = NULL) {
  global $user;

  if (!isset($uid)) {
    $uid = $user->uid;
  }

  $uw = entity_metadata_wrapper('user', $uid);

  if (!$uw->field_user_postal_address->value()) {
    return FALSE;
  }

  return $uw->field_user_postal_address->name_line->value()
    && $uw->field_user_postal_address->thoroughfare->value()
    && $uw->field_user_postal_address->locality->value()
    && $uw->field_user_postal_address->administrative_area->value()
    && $uw->field_user_postal_address->postal_code->value();
}

/**
 * Returns an address of a user.
 */
function _reiscout_property_get_user_address($uid = NULL) {
  global $user;

  if (!isset($uid)) {
    $uid = $user->uid;
  }

  if (!_reiscout_property_is_user_address_filled($uid)) {
    $msg = t('User !uid postal address is empty or incomplete.', array('!uid' => $uid));
    throw new ReiscoutPropertyUserAddressIsNotSet($msg);
  }

  $uw = entity_metadata_wrapper('user', $uid);

  return $uw->field_user_postal_address;
}

/**
 * Returns a phone number of a user.
 */
function _reiscout_property_get_user_phone($uid = NULL) {
  global $user;

  if (!isset($uid)) {
    $uid = $user->uid;
  }

  $uw = entity_metadata_wrapper('user', $uid);

  if (!$phone_number = $uw->field_user_phone_number->value()) {
    $msg = t('User !uid phone number is not set.', array('!uid' => $uid));
    throw new ReiscoutPropertyUserPhoneNumberIsNotSet($msg);
  }

  return $phone_number;
}

/**
 * Returns an email of a user.
 */
function _reiscout_property_get_user_email($uid = NULL) {
  global $user;

  if (!isset($uid)) {
    $uid = $user->uid;
  }

  $uw = entity_metadata_wrapper('user', $uid);
  return $uw->mail->value();
}

/**
 * Returns a website of a user.
 */
function _reiscout_property_get_user_website($uid = NULL) {
  global $user;

  if (!isset($uid)) {
    $uid = $user->uid;
  }

  $uw = entity_metadata_wrapper('user', $uid);
  return $uw->field_user_website->value();
}

/**
 * Returns a company name of a user.
 */
function _reiscout_property_get_user_company_name($uid = NULL) {
  global $user;

  if (!isset($uid)) {
    $uid = $user->uid;
  }

  $uw = entity_metadata_wrapper('user', $uid);
  return $uw->field_user_company_name->value();
}

/**
 * Checks if the property owner is an individual.
 */
function _reiscout_property_is_owner_an_individual_by_nid($nid) {
  static $is_owner_an_individual;

  if (isset($is_owner_an_individual[$nid])) {
    return $is_owner_an_individual[$nid];
  }

  $property_owner_address = _reiscout_property_get_owner_address_by_nid($nid);
  if ($property_owner_address->first_name->value()) {
    $is_owner_an_individual[$nid] = TRUE;
  }
  else {
    $is_owner_an_individual[$nid] = FALSE;
  }

  return $is_owner_an_individual[$nid];
}

/**
 * Returns amount of properties that were added by a user.
 *
 * Given a user ID, returns amount of properties
 * that were added by the user.
 */
function _reiscout_property_get_added_amount_by_uid($uid) {
  $query = new EntityFieldQuery;

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'property')
    ->propertyCondition('uid', $uid);

  return (int) $query->count()->execute();
}

/**
 * Checks if a node's 'Address Access' product has been purchased.
 *
 * Checks if an 'Address Access' product that is linked to a node
 * has been purchased.
 */
function _reiscout_property_lead_has_been_purchased($nid) {
  return _reiscout_property_commerce_node_has_been_purchased($nid, REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE);
}

/**
 * Checks if a $tag_name data quality tag is attached to a property.
 */
function _reiscout_property_is_data_quality_tag_attached($nid, $tag_name) {
  $nw = entity_metadata_wrapper('node', $nid);

  if (!$nw->field_data_quality_tags->value()) {
    return FALSE;
  }

  $tag = taxonomy_term_machine_name_load($tag_name, 'data_quality_tags');
  return in_array($tag, $nw->field_data_quality_tags->value());
}

/**
 * Given a property and owner addresses, determines the owner status.
 */
function _reiscout_property_determine_owner_status($address, $owner_address) {
  if ($owner_address->organisation_name->value()) {
    $status = 1;
  }
  elseif ($address->administrative_area->value() != $owner_address->administrative_area->value()) {
    $status = 4;
  }
  elseif ($address->thoroughfare->value() == $owner_address->thoroughfare->value()
       && $address->locality->value() == $owner_address->locality->value()) {
    $status = 2;
  }
  else {
    $status = 3;
  }

  return $status;
}

/**
 * Implements hook_services_account_object_alter().
 *
 * Adds following information into a user object:
 * - amount of properties that were added by a user.
 *
 * This information is used by the app. See reiscout_tutorial.js module.
 */
function reiscout_property_services_account_object_alter($user) {
  if ($user->uid) {
    $user->_amount_of_added_properties = _reiscout_property_get_added_amount_by_uid($user->uid);
  }
}
