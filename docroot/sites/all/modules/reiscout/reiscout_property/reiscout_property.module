<?php

define('REISCOUT_PROPERTY_NODE_TITLE_TO_CHANGE', 'Property #');
define('REISCOUT_PROPERTY_MESSAGE_TO_CHANGE', 'Property <em class="placeholder">Property #</em> has been created.');

/**
 * Implements hook_menu().
 */
function reiscout_property_menu() {
  $items['reiscout_property_get_c2d_report/%'] = array(
    'title' => 'Connect2Data Report',
    'description' => 'Returns a Connect2Data info for a property.',
    'page callback' => 'reiscout_property_get_c2d_report_page',
    'page arguments' => array(1),
    'access arguments' => array('make request to connect2data_api'),
    'file' => 'reiscout_property.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function reiscout_property_form_property_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_zillow_mls'] = array(
    '#type' => 'hidden',
  );
  $form['field_zillow_status'] = array(
    '#type' => 'hidden',
  );
  $form['field_zillow_zpid'] = array(
    '#type' => 'hidden',
  );
}

/**
 * Implements hook_node_validate().
 */
function reiscout_property_node_validate($node, $form, &$form_state) {
  $nw = entity_metadata_wrapper('node', $node);

  if (!$nw->field_address->value()) {
    return;
  }

  // Check if there is already another property with the same address
  $query = new EntityFieldQuery;
  $count = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'property')
    ->fieldCondition('field_address', 'thoroughfare', $nw->field_address->thoroughfare->value())
    ->fieldCondition('field_address', 'locality', $nw->field_address->locality->value())
    ->fieldCondition('field_address', 'administrative_area', $nw->field_address->administrative_area->value())
    ->fieldCondition('field_address', 'postal_code', $nw->field_address->postal_code->value())
    ->count()
    ->execute();

  if ($count) {
    form_set_error('field_address', t('A property with the same address already exists.'));
  }
}

/**
 * Implements hook_node_update().
 */
function reiscout_property_node_update($node) {
  if ('property' != $node->type) {
    return;
  }

  // We use 'Automatic Entity Labels' module to automatic title creation for
  // a Property node. The module uses 'hook_exit' hook to generating a node
  // title and updating the node. But 'Node' module have already saved the node
  // with token title and set a message about it. So here we look for the
  // message and change it.
  if (module_exists('auto_entitylabel')) {
    if (REISCOUT_PROPERTY_NODE_TITLE_TO_CHANGE == $node->original->title
      && REISCOUT_PROPERTY_NODE_TITLE_TO_CHANGE != $node->title) {
      if (!empty($_SESSION['messages']['status'])) {
        for ($i = 0, $len = count($_SESSION['messages']['status']); $i < $len; ++$i) {
          if (REISCOUT_PROPERTY_MESSAGE_TO_CHANGE == $_SESSION['messages']['status'][$i]) {
            $_SESSION['messages']['status'][$i] = t('Property %title has been created.', array('%title' => $node->title));
          }
        }
      }
    }
  }
}

/**
 * Builds data that is needed for request to the Connect2Data API.
 */
function _reiscout_property_build_property_criteria($nid) {
  $nw = entity_metadata_wrapper('node', $nid);

  if (!$address = $nw->field_address->value()) {
    $message = "The property's !nid address was not set.";
    watchdog('reiscout_property', $message, array('!nid' => $nid), WATCHDOG_ERROR);
    return FALSE;
  }

  return array(
    'street_address' => $address['thoroughfare'],
    'city' => $address['locality'],
    'state' => $address['administrative_area'],
    'postal_code' => $address['postal_code'],
  );
}

/**
 * Makes a request to the Connect2Data API and returns full info about property.
 */
function _reiscout_property_get_c2d_report_by_nid($nid, $request_reason) {
  if ($property_criteria = _reiscout_property_build_property_criteria($nid)) {
    if ($report = connect2data_api_get_detailed_subject_report($property_criteria, $request_reason)) {
      return $report;
    }
  }

  return FALSE;
}
