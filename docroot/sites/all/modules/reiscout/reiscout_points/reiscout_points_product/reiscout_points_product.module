<?php

/**
 * @file
 * Allows to sell Reiscout products for Reiscout points.
 */

/**
 * Implements hook_permission().
 */
function reiscout_points_product_permission() {
  return array(
    'administer reiscout products prices' =>  array(
      'title' => t('Configure prices of Reiscout products'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function reiscout_points_product_menu() {
  $items['admin/config/reiscout-points/products-prices'] = array(
    'title' => 'Reiscout products prices',
    'description' => 'Configure prices of Reiscout products.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reiscout_points_product_prices_form'),
    'access arguments' => array('administer reiscout products prices'),
    'file' => 'reiscout_points_product.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_currency_info().
 */
function reiscout_points_product_commerce_currency_info() {

  $currencies['PTS'] = array(
    'code' => 'PTS',
    'symbol' => 'Pts',
    'name' => 'Points',
    'rounding_step' => '1',
    // Userpoints currently does not support decimals.
    'decimals' => 0,
    'conversion_rate' => 0.01,
  );

  return $currencies;
}

/**
 * Returns a list of all the Reiscout products.
 *
 * Returns a list of all the registered Reiscout products
 * that can be sold for Reiscout points.
 */
function reiscout_points_product_get_all() {
  static $products;

  if (!$products) {
    $defaults = array(
      'price_callback' => FALSE,
    );

    if ($products = module_invoke_all('reiscout_points_product_info')) {
      foreach ($products as $product_id => $product) {
        $products[$product_id] = $product + $defaults;
        $products[$product_id]['id'] = $product_id;
      }
    }
  }

  return $products;
}

/**
 * Given an ID of a Reiscout product, returns its definition.
 */
function reiscout_points_product_get($product_id) {
  $products = reiscout_points_product_get_all();

  if (!isset($products[$product_id])) {
    $t_arg = array('!product_id' => $product_id);
    throw new Exception(t("The points product with '!product_id' ID has not been registered.", $t_arg));
  }

  return $products[$product_id];
}

/**
 * Given an SKU of a commerce product, returns a Reiscout product definition.
 */
function reiscout_points_product_get_by_sku($sku) {
  $commerce_product = commerce_product_load_by_sku($sku);
  if (!$commerce_product) {
    throw new Exception('Product by given SKU not found.');
  }

  $points_products = reiscout_points_product_get_all();

  if (!isset($points_products[$commerce_product->type])) {
    $t_arg = array('!product_id' => $commerce_product->type);
    throw new Exception(t("The points product with '!product_id' ID has not been registered.", $t_arg));
  }

  return $points_products[$commerce_product->type];
}

/**
 * Given an ID of a Reiscout product, returns its price in Reiscout points.
 */
function reiscout_points_product_get_price($product_id, $params = NULL) {
  $product = reiscout_points_product_get($product_id);

  if ($product['price_callback']) {
    return call_user_func($product['price_callback'], $params);
  }

  if ($prices = variable_get('reiscout_points_product_prices')) {
    if (isset($prices[$product_id])) {
      return $prices[$product_id];
    }
  }

  return FALSE;
}

/**
 * Form builder; A form to buy a Reiscout product.
 *
 * @see reiscout_points_product_buy_form_submit()
 */
function reiscout_points_product_buy_form($form, &$form_state, $product_id, $params = NULL) {
  $form['reiscout_points_product_data'] = array(
    '#tree' => TRUE,
  );
  $form['reiscout_points_product_data']['product_id'] = array(
    '#type' => 'value',
    '#value' => $product_id,
  );
  if ($params) {
    $form['reiscout_points_product_data']['params'] = array(
      '#type' => 'value',
      '#value' => $params,
    );
  }

  return reiscout_points_product_decorate_form($form, $form_state, $product_id, $params);
}

/**
 * Form submission handler for reiscout_points_product_buy_form().
 *
 * @see reiscout_points_product_buy_form()
 */
function reiscout_points_product_buy_form_submit($form, &$form_state) {
  $product_id = $form_state['values']['reiscout_points_product_data']['product_id'];

  $params = NULL;
  if (isset($form_state['values']['reiscout_points_product_data']['params'])) {
    $params = $form_state['values']['reiscout_points_product_data']['params'];
  }

  $product = reiscout_points_product_get($product_id);

  if (!isset($product['sell_callback'])) {
    $t_arg = array('!product_id' => $product_id);
    throw new Exception(t("A 'sell_callback' is not set for product with '!product_id' ID.", $t_arg));
  }

  // Use a transaction to ensure that no broken order is created!
  $transaction = db_transaction();
  try {
    $sell_callback_success = call_user_func($product['sell_callback'], $params);
    if ($sell_callback_success) {
      if (isset($form_state['values']['reiscout_points_product_data']['params']['commerce_product'])) {
        $commerce_product = $form_state['values']['reiscout_points_product_data']['params']['commerce_product'];
        $commerce_order_created = reiscout_points_product_sell_commerce_product($commerce_product->sku);
        if ($commerce_order_created) {
          reiscout_points_product_charge($product_id, $params);
          return;
        }
      } else {
        reiscout_points_product_charge($product_id, $params);
        return;
      }
    }
  } catch (Exception $e) {
    // Something went wrong so let's roll back the transaction:
    $transaction->rollback();
    // Add some information to the exception for easier debugging in an outer try / catch!
    $e->user_id = $GLOBALS['user']->uid;
    $e->product_sku = $commerce_product;
    $e->points_product_id = $product_id;
    throw $e;
  }



}

/**
 * Returns a form to buy a Reiscout product.
 */
function reiscout_points_product_get_buy_form($product_id, $params = NULL) {
  return drupal_get_form('reiscout_points_product_buy_form', $product_id, $params);
}

/**
 * Returns a form to buy a Reiscout product by SKU.
 */
function reiscout_points_product_get_buy_form_by_sku($sku, $params = NULL) {
  $commerce_product = commerce_product_load_by_sku($sku);
  $points_product = reiscout_points_product_get_by_sku($sku);
  //if ($params) {
    $params['commerce_product'] = $commerce_product;
  //}

  return drupal_get_form('reiscout_points_product_buy_form', $points_product['id'], $params);
}

/**
 * Decorates a buy product form.
 *
 * If a user has enough amount of points to buy a product, adds a submit button.
 * Otherwise adds:
 * - a disabled submit button;
 * - a link to buy more points.
 */
function reiscout_points_product_decorate_form($form, $form_state, $product_id, $params = NULL) {
  $balance = reiscout_points_user_balance_get();
  $product = reiscout_points_product_get($product_id);
  $price = reiscout_points_product_get_price($product_id, $params);

  $form['actions'] = array(
    '#type' => 'actions',
  );

  $t_arg = array(
    '@title' => $product['title'],
    '!price' => $price,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => format_plural($price, '@title for 1 point', '@title for !price points', $t_arg),
  );

  // If a user has enough amount of points to buy a product
  if ($balance >= $price) {
    if ($description = call_user_func($product['desc_callback'], $params)) {
      $form['actions']['description'] = array(
        '#type' => 'item',
        '#markup' => $description,
      );
    }
  }
  else {
    // If a user has not enough amount of points to buy a product,
    // but he has sent (he has submit) a form to buy a product.
    // We display him a message about that.
    if (!empty($form_state['input'])) {
      $desc_callback_args = $params;
      $desc_callback_args['type'] = 'condition';
      $message = _reiscout_points_product_build_not_enough_points_message(
        $price,
        $balance,
        call_user_func($product['desc_callback'], $desc_callback_args)
      );
      drupal_set_message($message, 'warning', FALSE);
    }

    $form['actions']['submit']['#disabled'] = TRUE;

    $t_arg = array(
      '!url' => url('reiscout-points/buy/' . ($price - $balance), array('query' => array('return_to' => $_GET['q']))),
    );

    $desc_callback_args = $params;
    $desc_callback_args['type'] = 'condition';
    $description = call_user_func($product['desc_callback'], $desc_callback_args);
    $form['actions']['description'] = array(
      '#type' => 'item',
      '#markup' => $description . t(' you must <a href="!url">purchase more points</a>', $t_arg),
    );
  }

  return $form;
}

/**
 * Charge a user for a purchased product.
 */
function reiscout_points_product_charge($product_id, $params = NULL) {
  global $user;

  $product = reiscout_points_product_get($product_id);
  $price = reiscout_points_product_get_price($product_id, $params);
  $reason = t("User has bought '@title' product", array('@title' => $product['title']));
  reiscout_points_user_balance_decrease($user->uid, $price, $reason);
}

/**
 * Alter results of the services call.
 *
 * Attaches to a node information about Reiscout products that the
 * current user can buy.
 *
 * This information is used by the app. See reiscout_points.js module,
 * reiscout_points_entity_post_render_field().
 *
 * @todo: check if code of the function can be optimized.
 */
function reiscout_points_product_services_request_postprocess_alter($controller, $args, $node) {
  if ('_node_resource_retrieve' == $controller['callback'] && 'property' == $node->type) {
    $points_products = array();

    $products = reiscout_points_product_get_all();
    foreach ($products as $product_id => $product) {
      if (isset($product['access_callback'])) {
        // If a user has access to a product
        if (call_user_func($product['access_callback'], $node)) {
          $params = isset($product['params_callback']) ? call_user_func($product['params_callback'], $node) : NULL;
          $price = reiscout_points_product_get_price($product_id, $params);
          $balance = reiscout_points_user_balance_get();

          $t_arg = array(
            '@title' => $product['title'],
            '!price' => $price,
          );
          $title = format_plural($price, '@title for 1 point', '@title for !price points', $t_arg);

          // If a user has enough amount of points to buy a product
          if ($balance >= $price) {
            $description = call_user_func($product['desc_callback'], 'standard', 'app');
          }
          else {
            $t_arg = array(
              '!url' => 'reiscout-points/buy/' . ($price - $balance) . '?return_to=node/' . $node->nid,
            );
            $description = call_user_func($product['desc_callback'], 'condition', 'app');
            $description .= t(' you must <a href="#" onclick="javascript:drupalgap_goto(\'!url\');" >purchase more points</a>', $t_arg);
          }

          $points_products[$product_id] = array(
            'available' => $balance >= $price,
            'title' => $title,
            'desc' => $description,
          );
        }
      }
    }

    if ($points_products) {
      $node->_reiscout_points_products = $points_products;
    }
  }
}

/**
 * Implements hook_services_resources().
 */
function reiscout_points_product_services_resources() {
  return array(
    'reiscout_points_product' => array(
      'actions' => array(
        'sell' => array(
          'help' => t('Sells a Reiscout product'),
          'file' => array('type' => 'inc', 'module' => 'reiscout_points_product', 'name' => 'reiscout_points_product.resources'),
          'callback' => '_reiscout_points_product_resource_sell',
          'args' => array(
            array(
              'name' => 'product_id',
              'type' => 'int',
              'source' => array('data' => 'product_id'),
              'optional' => FALSE,
              'description' => 'An ID of a Reiscout product',
            ),
            array(
              'name' => 'params',
              'type' => 'array',
              'source' => array('data' => 'params'),
              'optional' => FALSE,
              'description' => 'An array of params for a Reiscout product',
            ),
          ),
          'access callback' => '_reiscout_points_product_resource_access',
          'access arguments' => array('sell'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
  );
}

/**
 * Builds a message that a user has not enough amount of points to buy a product.
 */
function _reiscout_points_product_build_not_enough_points_message($price, $balance, $text) {
  $t_arg = array(
    '!price' => $price,
    '!balance' => $balance,
    '@text' => $text,
  );

  $msg1 = format_plural(
    $price,
    '@text you must have at least 1 point.',
    '@text you must have at least !price points.',
    $t_arg
  );

  $msg2 = format_plural(
    $balance,
    'You have only 1 point.',
    'You have only !balance points.',
    $t_arg
  );

  return $msg1 . ' ' . $msg2;
}

/**
 * Create a commerce order with complete status, line item and payment transaction.
 */
function reiscout_points_product_sell_commerce_product($sku, $account = NULL) {
  if (!isset($account)) {
    $account = $GLOBALS['user'];
  }

  // Empty cart
  if ($order = commerce_cart_order_load($account->uid)) {
    commerce_cart_order_empty($order);
  }

  $product = commerce_product_load_by_sku($sku);
  if (empty($product)) {
    throw new Exception('Commerce Product not found by SKU');
  }

  // Create the new line item with a product
  $line_item = commerce_product_line_item_new($product);

  // Add the line item to the cart
  $line_item = commerce_cart_product_add($account->uid, $line_item, FALSE);

  // Complete the checkout process for the cart
  $order = commerce_order_load($line_item->order_id);
  $order = commerce_order_status_update($order, 'checkout_complete');
  commerce_checkout_complete($order);

  return TRUE;
}

/**
 * Check is user purchased a given product.
 */
function reiscout_points_product_is_purchased($sku, $account) {
  $query = db_select('commerce_order', 'ord');
  $query->join('commerce_line_item', 'li', 'ord.order_id = li.order_id');
  $query->join('field_data_commerce_product', 'li_prod', 'li.line_item_id = li_prod.entity_id');
  $query->join('commerce_product', 'prod', 'prod.product_id = li_prod.commerce_product_product_id');
  $query
    ->fields('ord', array('order_id'))
    ->condition('ord.uid', $account->uid)
    ->condition('ord.status', 'completed')
    ->condition('prod.sku', $sku);

  return (bool) $query->execute()->rowCount();
}
