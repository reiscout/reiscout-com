<?php

/**
 * @file
 * Allows to send a postcard to an owner of a property.
 */

define('REISCOUT_MAIL_POSTCARD_EXCEPTION_INVALID_PROPERTY_NODE', 0);
define('REISCOUT_MAIL_POSTCARD_EXCEPTION_INVALID_TEMPLATE_NODE', 1);
define('REISCOUT_MAIL_POSTCARD_EXCEPTION_TEMPLATE_FRONT_FILE_IS_NOT_READABLE', 2);
define('REISCOUT_MAIL_POSTCARD_EXCEPTION_TEMPLATE_BACK_FILE_IS_NOT_READABLE', 3);
define('REISCOUT_MAIL_POSTCARD_EXCEPTION_TEMPLATES_NOT_AVAILABLE', 4);
define('REISCOUT_MAIL_POSTCARD_SEND_LIMIT_PERIOD', 14);

/**
 * Implements hook_permission().
 */
function reiscout_mail_postcard_permission() {
  return array(
    'administer reiscout mail postcard' => array(
      'title' => t('Administer Reiscout Mail Postcard'),
    ),
    'view all users postcards sent history' => array(
      'title' => t("View all users' postcards sent history"),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function reiscout_mail_postcard_menu() {
  $items['admin/config/services/reiscout-mail-postcard'] = array(
    'title' => 'Reiscout Mail Postcard',
    'description' => 'Configure Reiscout Mail Postcard settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reiscout_mail_postcard_admin_settings_form'),
    'access arguments' => array('administer reiscout mail postcard'),
    'file' => 'reiscout_mail_postcard.admin.inc',
  );

  $items['reiscout-mail-postcard/%node/send'] = array(
    'title' => 'Pick up a template',
    'description' => 'Allows to pick up a template for a postcard.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reiscout_mail_postcard_send_form', 1),
    'access callback' => '_reiscout_mail_postcard_is_user_can_send',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'reiscout_mail_postcard.pages.inc',
  );

  $items['node/%node/postcards-sent-history'] = array(
    'title' => 'Postcards Sent History',
    'page callback' => 'reiscout_mail_postcard_sent_history_page',
    'page arguments' => array(1),
    'access callback' => '_reiscout_mail_postcard_is_user_can_see_sent_history',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'reiscout_mail_postcard.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_field_extra_fields().
 */
function reiscout_mail_postcard_field_extra_fields() {
  $return = array();

  $return['node']['property'] = array(
    'display' => array(
      'reiscout-mail-buttons' => array(
        'label' => t('Reiscout mail buttons'),
        'description' => t('Buttons related to sending of a postcard.'),
        'weight' => -1,
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_admin_paths().
 */
function reiscout_mail_postcard_admin_paths() {
  return array(
    'node/*/postcards-sent-history*' => TRUE,
  );
}

/**
 * Implements hook_reiscout_points_product_info().
 */
function reiscout_mail_postcard_reiscout_points_product_info() {
  return array(
    'send_postcard' => array(
      'title' => t('Send a Postcard'),
      'description' => t('Sends a postcard to an owner of a property'),
      'desc_callback' => '_reiscout_mail_postcard_get_desc_for_send_postcard_product',
      'services_sell_callback' => '_reiscout_mail_postcard_provide_send_postcard_product_services',
      'access_callback' => '_reiscout_mail_postcard_is_user_can_send',
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function reiscout_mail_postcard_node_view($node, $view_mode, $langcode) {
  if ('property' != $node->type || 'full' != $view_mode) {
    return;
  }

  if (!_reiscout_mail_postcard_is_user_can_send($node)) {
    return;
  }

  // Prepare an HTML-container for buttons
  $node->content['reiscout-mail-buttons'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('reiscout-mail-buttons'),
    ),
    '#weight' => -1,
  );

  // Add 'Send a Postcard' button
  $button_text = t('Send a Postcard');
  $button_url = 'reiscout-mail-postcard/' . $node->nid . '/send';
  $node->content['reiscout-mail-buttons']['send-postcard'] = array(
    '#prefix' => '<div class="button">',
    '#markup' => l($button_text, $button_url),
    '#suffix' => '</div>',
  );

  // Add a link to the sample postcard
  $link_text = t('Click here to view a sample postcard');
  $link_url = drupal_get_path('module', 'reiscout_mail_postcard') . '/pdf/sample_postcard.pdf';
  $node->content['reiscout-mail-buttons']['sample-postcard-link'] = array(
    '#prefix' => '<div class="sample-postcard-link">',
    '#markup' => l($link_text, $link_url, array('attributes' => array('target' => '_blank'))),
    '#suffix' => '</div>',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reiscout_mail_postcard_form_postcard_template_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide 'Global template' checkbox from users who are not administrators
  $role = user_role_load_by_name('administrator');
  if (!user_has_role($role->rid)) {
    $form['field_postcard_template_global'][LANGUAGE_NONE]['#default_value'] = 0;
    $form['field_postcard_template_global']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reiscout_mail_postcard_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // Hide 'Default template nid' field from users who are not administrators
  $role = user_role_load_by_name('administrator');
  if (!user_has_role($role->rid)) {
    $form['field_default_template_nid']['#access'] = FALSE;
  }
}

/**
 * Implements hook_node_delete().
 */
function reiscout_mail_postcard_node_delete($node) {
  db_delete('reiscout_mail_postcard_history')
    ->condition('pnid', $node->nid)
    ->execute();
}

/**
 * Implements hook_services_resources().
 */
function reiscout_mail_postcard_services_resources() {
  return array(
    'reiscout_mail_postcard' => array(
      'actions' => array(
        'get_available_actions' => array(
          'help' => t('Returns the list of available actions'),
          'file' => array('type' => 'inc', 'module' => 'reiscout_mail_postcard', 'name' => 'reiscout_mail_postcard.resources'),
          'callback' => '_reiscout_mail_postcard_resource_get_available_actions',
          'args' => array(
            array(
              'name' => 'nid',
              'type' => 'int',
              'source' => array('data' => 'nid'),
              'optional' => FALSE,
              'description' => 'The nid of the property node',
            ),
          ),
          'access callback' => '_reiscout_mail_postcard_resource_access',
          'access arguments' => array('get_available_actions'),
          'access arguments append' => TRUE,
        ),
        'send' => array(
          'help' => t('Sends a postcard to an owner of a property'),
          'file' => array('type' => 'inc', 'module' => 'reiscout_mail_postcard', 'name' => 'reiscout_mail_postcard.resources'),
          'callback' => '_reiscout_mail_postcard_resource_send',
          'args' => array(
            array(
              'name' => 'nid',
              'type' => 'int',
              'source' => array('data' => 'nid'),
              'optional' => FALSE,
              'description' => 'The nid of the property node',
            ),
          ),
          'access callback' => '_reiscout_mail_postcard_resource_access',
          'access arguments' => array('send'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function reiscout_mail_postcard_theme($existing, $type, $theme, $path) {
  return array(
    'reiscout_mail_postcard_address_block' => array(
      'variables' => array('to' => NULL, 'from' => NULL),
      'path' => drupal_get_path('module', 'reiscout_mail_postcard'),
      'template' => 'templates/address-block',
    ),
  );
}

/**
 * Preprocess variables for address-block.tpl.php
 *
 * @see address-block.tpl.php
 */
function template_preprocess_reiscout_mail_postcard_address_block(&$variables) {
  $variables['from']['name'] = strtoupper($variables['from']['name']);
  $variables['from']['thoroughfare'] = strtoupper($variables['from']['thoroughfare']);
  $variables['from']['city'] = strtoupper($variables['from']['city']);
  $variables['from']['state'] = strtoupper($variables['from']['state']);
  $variables['from']['zip'] = strtoupper($variables['from']['zip']);
}

/**
 * Checks if the current user may send a postcard to a property's owner.
 *
 * A user may send a postcard to a property's owner if:
 * - he is the property's author OR he has purchased the property's address
 *   AND
 * - 'Owner postal address' field has been filled out.
 */
function _reiscout_mail_postcard_is_user_can_send($node) {
  global $user;

  if (user_is_anonymous()) {
    return FALSE;
  }

  // If the "Owner postal address" field has not been filled out,
  // user cannot send a postcard.
  if (!_reiscout_property_is_owner_address_filled_by_nid($node->nid)) {
    return FALSE;
  }

  // If the user is not an author of the property node
  if ($node->uid != $user->uid) {
    // Check if the user has purchased the property's address
    $user_has_purchased_node = reiscout_property_commerce_is_node_purchased(
      $node->nid,
      REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE,
      $user->uid);

    if (!$user_has_purchased_node) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Checks if the current user may see postcards sent history.
 *
 * The user may see postcards sent history if:
 * - (he is the property's author OR he has purchased the property's lead
 *   AND
 * - he sent at least one postcard to the property's owner)
 *   OR
 * - (he has 'view all users postcards sent history' permission
 *   AND
 * - at least one postcard was sent to the property's owner)
 */
function _reiscout_mail_postcard_is_user_can_see_sent_history($node) {
  global $user;

  if (user_access('view all users postcards sent history')) {
    if (_reiscout_mail_postcard_get_sent_cnt($node->nid)) {
      return TRUE;
    }
  }

  // Flag if the user has purchased the property's address
  $user_has_purchased_lead = reiscout_property_commerce_is_node_purchased($node->nid,
    REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE,
    $user->uid);

  if ($node->uid == $user->uid || $user_has_purchased_lead) {
    if (_reiscout_mail_postcard_get_sent_cnt($node->nid, $user->uid)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Given Property nid, returns number of postcards sent to the property's owner.
 */
function _reiscout_mail_postcard_get_sent_cnt($nid, $uid = NULL) {
  $query = db_select('reiscout_mail_postcard_history', 'h')
    ->fields('h')
    ->condition('pnid', $nid);

  if ($uid) {
    $query->condition('uid', $uid);
  }

  return $query->execute()->rowCount();
}

/**
 * Checks if the current user has already sent a postcard to an owner.
 *
 * Given a property's NID, checks if the current user has already sent
 * a postcard to the property's owner withing the defined send limit period.
 *
 * We want to allow a user to send a postcard to the same property's owner
 * only once per defined send limit period of time.
 */
function _reiscout_mail_postcard_is_user_already_sent_within_limit_period($property_nid) {
  global $user;

  $limit_period = variable_get('reiscout_mail_postcard_send_limit_period', REISCOUT_MAIL_POSTCARD_SEND_LIMIT_PERIOD);

  $query = db_select('reiscout_mail_postcard_history', 'h')
    ->fields('h', array('pnid'))
    ->condition('uid', $user->uid)
    ->condition('pnid', $property_nid)
    ->condition('timestamp', time() - $limit_period * 24 * 60 * 60, '>');

  return (bool) $query->execute()->rowCount();
}

/**
 * Swaps the first name and the last name in a full name string.
 *
 * Given a full name of a postcard's recipient,
 * swaps the first name and the last name.
 */
function _reiscout_mail_postcard_swap_recipient_first_and_last_names($full_name) {
  if (strpos($full_name, '/')) {
    $names = explode('/', $full_name);
    $names = array_map('trim', $names);
    $names = array_map('_reiscout_mail_postcard_swap_recipient_first_and_last_names', $names);
    $full_name = implode(' / ', $names);
  }
  elseif (strpos($full_name, ' ')) {
    $names = explode(' ', $full_name);
    $names = array_map('trim', $names);
    $last_name = array_shift($names);
    $names[] = $last_name;
    $full_name = implode(' ', $names);
  }

  return $full_name;
}

/**
 * Provides a 'Send a Postcard' product (service) to a user.
 *
 * This function is called via a Services resource.
 */
function _reiscout_mail_postcard_provide_send_postcard_product_services($params) {
  global $user;

  $result = array(
    'status' => FALSE,
    'message' => '',
  );

  try {
    module_load_include('inc', 'reiscout_mail_postcard', 'reiscout_mail_postcard.pages');

    $property_nid = $params['nid'];

    if (_reiscout_mail_postcard_is_user_already_sent_within_limit_period($property_nid)) {
      $t_args = array(
        '!period' => variable_get('reiscout_mail_postcard_send_limit_period', REISCOUT_MAIL_POSTCARD_SEND_LIMIT_PERIOD),
      );
      $result['message'] = t("You may send a postcard to the same property's owner only once per !period days!", $t_args);
      return $result;
    }

    $template_nid = _reiscout_mail_postcard_get_template_nid_by_uid($user->uid);
    $postcard = _reiscout_mail_postcard_send($property_nid, $template_nid);
    _reiscout_mail_postcard_log($property_nid, $template_nid, $postcard['id'], $postcard['expected_delivery_date']);

    $t_args = array(
      '!url' => $postcard['url'],
      '%carrier' => $postcard['carrier'],
      '%date' => $postcard['expected_delivery_date'],
      '!url_login' => url('/user', array('absolute' => TRUE)),
    );

    $result['status'] = TRUE;
    $result['message'] = t('Your <a href="#" onclick="javascript:window.open(\'!url\', \'_system\');">postcard</a> will be sent via %carrier. Expected delivery date is %date. <br><a onclick="javascript:window.open(\'!url_login\', \'_system\');">Log in to reiscout.com</a> with the same credentials and create your own template for a postcard.', $t_args);
  }
  catch (ReiscoutPropertyUserAddressIsNotSet $e) {
    watchdog_exception('reiscout_mail_postcard', $e);
    $t_args = array('!user_edit_link' => 'user/' . $user->uid . '/edit');
    $result['message'] = t("To send a postcard you must fill in your postal address for <a href='#' onclick='javascript:drupalgap_goto(\"!user_edit_link\", {});'>your profile</a>.", $t_args);
  }
  catch (ReiscoutPropertyUserPhoneNumberIsNotSet $e) {
    watchdog_exception('reiscout_mail_postcard', $e);
    $t_args = array('!user_edit_link' => 'user/' . $user->uid . '/edit');
    $result['message'] = t("To send a postcard you must fill in your phone number for <a href='#' onclick='javascript:drupalgap_goto(\"!user_edit_link\", {});'>your profile</a>.", $t_args);
  }
  catch (LobApiException $e) {
    $result['message'] = t("Letter to the property's owner cannot be sent. Please, try again later or contact technical support for assistance!");
  }
  catch (Exception $e) {
    watchdog_exception('reiscout_mail_postcard', $e);
    $result['message'] = t("Letter to the property's owner cannot be sent. Please, try again later or contact technical support for assistance!");
  }

  return $result;
}

/**
 * Returns a description for a 'Send a Postcard' product (service).
 *
 * @todo: we can use a system_settings_form() to configure description.
 */
function _reiscout_mail_postcard_get_desc_for_send_postcard_product($type, $place) {
  if (!in_array($type, array('standard', 'condition'))
   || !in_array($place, array('site', 'app'))) {
    return '';
  }

  if ('standard' == $type) {
    if ('site' == $place) {
      return '';
    }
    else {
      $t_arg = array(
        '!url' => url(drupal_get_path('module', 'reiscout_mail_postcard') . '/pdf/sample_postcard.pdf', array('absolute' => TRUE)),
      );
      return t('<a href="#" onclick="javascript:window.open(\'!url\', \'_system\');">Click here to view a sample postcard</a>', $t_arg);
    }
  }
  elseif ('condition' == $type) {
    if ('site' == $place) {
      return t('To send a postcard');
    }
    else {
      $t_arg = array(
        '!url' => url(drupal_get_path('module', 'reiscout_mail_postcard') . '/pdf/sample_postcard.pdf', array('absolute' => TRUE)),
      );
      return t('To send a postcard (<a href="#" onclick="javascript:window.open(\'!url\', \'_system\');">see a sample postcard</a>)', $t_arg);
    }
  }
}
