<?php

/**
 * @file
 * Allows to send a postcard to an owner of a property.
 */

define('REISCOUT_MAIL_POSTCARD_USERPOINTS_TID', 2);

define('REISCOUT_MAIL_POSTCARD_EXCEPTION_INVALID_PROPERTY_NODE', 0);
define('REISCOUT_MAIL_POSTCARD_EXCEPTION_INVALID_TEMPLATE_NODE', 1);
define('REISCOUT_MAIL_POSTCARD_EXCEPTION_TEMPLATE_FRONT_FILE_IS_NOT_READABLE', 2);
define('REISCOUT_MAIL_POSTCARD_EXCEPTION_TEMPLATE_BACK_FILE_IS_NOT_READABLE', 3);
define('REISCOUT_MAIL_POSTCARD_EXCEPTION_TEMPLATES_NOT_AVAILABLE', 4);

/**
 * Implements hook_menu().
 */
function reiscout_mail_postcard_menu() {
  $items['reiscout-mail-postcard/%node/send'] = array(
    'title' => 'Pick up a template',
    'description' => 'Pick up a predefined template for your postcard or create a custom one.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reiscout_mail_postcard_send_form', 1),
    'access callback' => '_reiscout_mail_postcard_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'reiscout_mail_postcard.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_field_extra_fields().
 */
function reiscout_mail_postcard_field_extra_fields() {
  $return = array();

  $return['node']['property'] = array(
    'display' => array(
      'reiscout-mail-buttons' => array(
        'label' => t('Reiscout mail buttons'),
        'description' => t('Buttons related to sending of a postcard.'),
        'weight' => -1,
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_node_view().
 */
function reiscout_mail_postcard_node_view($node, $view_mode, $langcode) {
  if ('property' == $node->type && 'full' == $view_mode) {
    global $user;

    if (!_reiscout_mail_postcard_is_user_can_send($node)) {
      return;
    }

    // Prepare an HTML-container for buttons
    $node->content['reiscout-mail-buttons'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('reiscout-mail-buttons'),
      ),
      '#weight' => -1,
    );

    $points = userpoints_get_current_points($user->uid, REISCOUT_MAIL_POSTCARD_USERPOINTS_TID);

    // If user has enough points for current action
    if ($points > 0) {
      $button_text = t('Send a Postcard');
      $button_url = 'reiscout-mail-postcard/' . $node->nid . '/send';
      $link = l($button_text, url($button_url, array('query' => drupal_get_destination(), 'absolute' => TRUE), array('html' => TRUE)));
      $node->content['reiscout-mail-buttons']['send-postcard'] = array(
        '#prefix' => '<div class="button">',
        '#markup' => $link,
        '#suffix' => '</div>',
      );

      $sample_postcard_link_text = t('Click here to view a sample postcard');
      $sample_postcard_link_url = url(drupal_get_path('module', 'reiscout_mail_postcard') . '/pdf/sample_postcard.pdf');
      $node->content['reiscout-mail-buttons']['sample-postcard-link'] = array(
        '#prefix' => '<div class="sample-postcard-link">',
        '#markup' => l($sample_postcard_link_text, $sample_postcard_link_url, array('attributes' => array('target' => '_blank'))),
        '#suffix' => '</div>',
      );
    }
    // If not
    else {
      // Add link/button via Rules Link module to allow user to buy points as a commerce product
      $rules_link_name = 'buy_sending_letter';
      if ($rendered_link = rules_link_render($rules_link_name, $node->nid, drupal_get_destination(), array())) {
        $node->content['reiscout-mail-buttons']['send-postcard'] = array(
          '#prefix' => '<div class="button">',
          '#markup' => drupal_render($rendered_link),
          '#suffix' => '</div>',
        );
      }
      else {
        $msg = t('%rules_link_name rules link cannot be rendered.', array('%rules_link_name' => $rules_link_name));
        if (in_array('administrator', $user->roles)) {
          drupal_set_message($msg, 'error');
        }
        watchdog('reiscout_mail_postcard', $msg, array(), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reiscout_mail_postcard_form_postcard_template_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide 'Global template' checkbox from users who are not administrators
  $role = user_role_load_by_name('administrator');
  if (!user_has_role($role->rid)) {
    $form['field_postcard_template_global'][LANGUAGE_NONE]['#default_value'] = 0;
    $form['field_postcard_template_global']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reiscout_mail_postcard_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // Hide 'Default template nid' field from users who are not administrators
  $role = user_role_load_by_name('administrator');
  if (!user_has_role($role->rid)) {
    $form['field_default_template_nid']['#access'] = FALSE;
  }
}

/**
 * Implements hook_services_resources().
 */
function reiscout_mail_postcard_services_resources() {
  return array(
    'reiscout_mail_postcard' => array(
      'actions' => array(
        'get_available_actions' => array(
          'help' => t('Returns the list of available actions'),
          'file' => array('type' => 'inc', 'module' => 'reiscout_mail_postcard', 'name' => 'reiscout_mail_postcard.resources'),
          'callback' => '_reiscout_mail_postcard_resource_get_available_actions',
          'args' => array(
            array(
              'name' => 'nid',
              'type' => 'int',
              'source' => array('data' => 'nid'),
              'optional' => FALSE,
              'description' => 'The nid of the property node',
            ),
          ),
          'access callback' => '_reiscout_mail_postcard_resource_access',
          'access arguments' => array('get_available_actions'),
          'access arguments append' => TRUE,
        ),
        'send' => array(
          'help' => t('Sends a postcard to an owner of a property'),
          'file' => array('type' => 'inc', 'module' => 'reiscout_mail_postcard', 'name' => 'reiscout_mail_postcard.resources'),
          'callback' => '_reiscout_mail_postcard_resource_send',
          'args' => array(
            array(
              'name' => 'nid',
              'type' => 'int',
              'source' => array('data' => 'nid'),
              'optional' => FALSE,
              'description' => 'The nid of the property node',
            ),
          ),
          'access callback' => '_reiscout_mail_postcard_resource_access',
          'access arguments' => array('send'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
  );
}

/**
 * Determines whether the current user can send a postcard.
 */
function _reiscout_mail_postcard_access($node) {
  global $user;

  if (!_reiscout_mail_postcard_is_user_can_send($node)) {
    return FALSE;
  }

  // If user has not enough points
  if (0 >= userpoints_get_current_points($user->uid, REISCOUT_MAIL_POSTCARD_USERPOINTS_TID)) {
    drupal_set_message(t('Not enough points.'), 'error');
    return FALSE;
  }

  return TRUE;
}

/**
 * Checks if a user may send a postcard to a property's owner.
 *
 * A user may send a postcard to a property's owner if:
 * - he is the property's author OR he purchased the property's address
 *   AND
 * - 'Owner postal address' field has been filled out.
 */
function _reiscout_mail_postcard_is_user_can_send($node) {
  global $user;

  if (user_is_anonymous()) {
    return FALSE;
  }

  // If the "Owner postal address" field has not been filled out,
  // user cannot send a postcard.
  if (!_reiscout_property_is_owner_address_filled_by_nid($node->nid)) {
    return FALSE;
  }

  // Check if the user has an 'administrator' role
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }

  // Check if the user purchased the property's address
  $is_user_purchased_node = reiscout_property_commerce_is_node_purchased(
    $node->nid,
    REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE,
    $user->uid);

  // If the user is not an author of the property node
  // and if he did not purchase the property's address
  if ($node->uid != $user->uid && !$is_user_purchased_node) {
    return FALSE;
  }

  return TRUE;
}
