<?php

/**
 * @file
 * Reiscout Send Letters -
 * 1. Displays apropriate action buttons and make control over points
 * to send letters.
 * 2. Builds the form to select a template for letter.
 * 3. Make preview of each template in the form.
 * 4. Alters template edit form and user profile form.
 * 5. Saves user's default template to userprofile field.
 */

// ToDo: place term in feature and use here uuis instead id.
define('TERM_ID_POINTS_SEND_LETTERS', 2);
// ToDo: move it to an admin settings form
define('REISCOUT_SEND_LETTERS_DEFAULT_TEMPLATE_NID', 468);

/**
 * Implements hook_menu().
 */
function reiscout_send_letters_menu() {
  // ToDo: move it to form submit handler
  $items['send_letter/%node'] = array(
    'title' => 'Pick up a predefined template for your letter or create a custom one',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reiscout_send_letters_select_template_form', 1),
    'access callback' => 'reiscout_send_letters_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['send_letter/%node/%node'] = array(
    'title' => 'Send a letter to Property Owner',
    'page callback' => 'reiscout_send_letters_send_letter_callback',
    'page arguments' => array(1, 2),
    'access callback' => 'reiscout_send_letters_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback
 * 1. Check user roles
 * 2. Check if user has purchased access to node
 * 3. Check if user has enough points
 */
function reiscout_send_letters_access($node) {
  global $user;

  if (!_reiscout_send_letters_is_user_can_send($node)) {
    return FALSE;
  }

  // If user has not enough points
  if (0 >= userpoints_get_current_points($user->uid, TERM_ID_POINTS_SEND_LETTERS)) {
    drupal_set_message(t('Not enough points.'), 'error');
    return FALSE;
  }

  return TRUE;
}

/**
 * Checks if a user may send a letter to a property's owner.
 *
 * A user may send a letter to a property's owner if:
 * - he is not the property's author AND
 * - he has bought the property's address AND
 * - info about the property's owner has been filled out.
 */
function _reiscout_send_letters_is_user_can_send($node) {
  global $user;

  if (user_is_anonymous()) {
    return FALSE;
  }

  // If the "Owner postal address" field has not been filled out,
  // user cannot send a letter.
  if (!_reiscout_owner_info_is_filled_by_nid($node->nid)) {
    return FALSE;
  }

  // Check if user is not administrator
  if (!in_array('administrator', $user->roles)) {
    // Check if user have purchased access to node
    $node_purchased = reiscout_property_commerce_is_node_purchased($node->nid,
        REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE,
        $user->uid);
    // If user have not purchased access to node return FALSE.
    if (!$node_purchased) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Page callback for send_letter/% (step 1).
 * 1. Builds the form to select a template for letter.
 * 2. Make preview of each template in the form.
 */
function reiscout_send_letters_select_template_form($form, &$form_state, $node) {
  global $user;

  // Check if node exists and has type "property"
  if (!$node || $node->type != 'property') {
    drupal_set_message("Incorrect node or node type.", "error");
    drupal_goto();
  }

  // Check "Owner postal address" field from current node
  if (!isset($node->field_owner_postal_address[LANGUAGE_NONE][0]) ||
      empty($node->field_owner_postal_address[LANGUAGE_NONE][0])) {
    drupal_set_message("Error: empty or incomplete Owner Postal Address (to).", "error");
    drupal_goto();
  }

  $user_edit_link = l('user',
    'user/' . $user->uid . '/edit',
    array('query' => array('destination' => 'node/'. $node->nid))
  );

 // Check "User postal address" field from user profile
  $user_data = user_load($user->uid);
  if (!isset($user_data->field_user_postal_address[LANGUAGE_NONE][0]) ||
      empty($user_data->field_user_postal_address[LANGUAGE_NONE][0])) {

    $msg = t("To send a letter to property owner you need to fill in your address for your !user profile.",
      array('!user' => $user_edit_link)
    );

    drupal_set_message($msg, "error");
    drupal_goto();
  }

  // Check if 'User Phone Number' field was filled
  if (empty($user_data->field_user_phone_number[LANGUAGE_NONE][0])) {
    $msg = t("To send a letter to property owner you need to fill in your phone number for your !user profile.",
      array('!user' => $user_edit_link)
    );

    drupal_set_message($msg, "error");
    drupal_goto();
  }

  // Get all templates marked by admin as "Global template" ("predefined")
  $templates = db_select('node', 'n');
  $templates->innerJoin('field_data_field_is_global_template', 't', 't.entity_id = n.nid');
  $templates->innerJoin('field_data_body', 'b', 'b.entity_id = n.nid');
  $templates->fields('n', array('nid', 'title'));
  $templates->fields('b', array('body_value'));
  $templates->condition('n.type', 'letter_template');
  $templates->condition('t.field_is_global_template_value', 1);
  $templates = $templates->execute()->fetchAllAssoc('nid');

  if (empty($templates)) {
    // ToDo: put in message info how to fix that.
    drupal_set_message("No letter templates found.", "error");
    drupal_goto();
  }

  // Get all templates created by current user ("custom").
  // Predefinded templates especially excluded for admin.
  $user_templates = db_select('node', 'n');
  $user_templates->innerJoin('field_data_field_is_global_template', 't', 't.entity_id = n.nid');
  $user_templates->innerJoin('field_data_body', 'b', 'b.entity_id = n.nid');
  $user_templates->fields('n', array('nid', 'title'));
  $user_templates->fields('b', array('body_value'));
  $user_templates->condition('n.type', 'letter_template');
  $user_templates->condition('n.uid', $user->uid);
  $user_templates->condition('t.field_is_global_template_value', 1, '<>');
  $user_templates = $user_templates->execute()->fetchAllAssoc('nid');

  $form['promt'] = array(
    '#markup' => '<p>Please select letter template below:</p>',
  );

  // Remember current destination.
  $query = array('destination' => 'send_letter/' . $node->nid);

  // Replacements for tokens
  $tokens = array(
    '{{owner_name}}',
    '{{street_address}}',
    '{{city}}',
    '{{my_phone}}'
  );

  $replaces = array(
    $node->field_owner_postal_address[LANGUAGE_NONE][0]['name_line'],
    $node->field_address[LANGUAGE_NONE][0]['thoroughfare'],
    $node->field_address[LANGUAGE_NONE][0]['locality'],
    $user_data->field_user_phone_number[LANGUAGE_NONE][0]['safe_value']
  );

  // Formats "predefined templates" options for radios field
  foreach ($templates as $t_nid => $template) {
    $template_body = str_replace($tokens, $replaces, $template->body_value);
    $clone_token = clone_get_token($t_nid);
    $clone_url = url('node/' . $t_nid . '/clone/' . $clone_token . '/', array('query' => $query, 'absolute' => TRUE));
    $templates[$t_nid] =
        'Predefined: ' . $template->title . ' | ' .
        l(t('Create my own template based on this one'), $clone_url, array('html' => TRUE, 'attributes' => array('class' => 'clone-template'))) .
        '<div class="template-sample template-predefined">' . $template_body . '</div>';
  }

  // Formats "custom templates" options for radios field
  if (!empty($user_templates)) {
    foreach ($user_templates as $t_nid => $template) {
      $template_body = str_replace($tokens, $replaces, $template->body_value);
      // ToDo: use theme_table here instead.
      $templates[$t_nid] =
          '<em>Custom:</em> ' . $template->title . ' | ' .
          l('edit', url('node/' . $t_nid . '/edit/', array('query' => $query, 'absolute' => TRUE)), array('html' => TRUE, 'attributes' => array('class' => 'edit-template'))) .
          ' | ' .
          l('delete', url('node/' . $t_nid . '/delete/', array('query' => $query, 'absolute' => TRUE)), array('html' => TRUE, 'attributes' => array('class' => 'delete-template'))) .
          '<div class="template-sample template-custom">' . $template_body . '</div>';
    }
  }

  // Set currently selected to first item (default)
  reset($templates);
  $default_template_nid = key($templates);

  // Get default template nid from user profile if exists
  if (isset($user_data->field_default_template_nid[LANGUAGE_NONE][0]['value']) && !empty($user_data->field_default_template_nid[LANGUAGE_NONE][0]['value'])) {
    if (array_key_exists($user_data->field_default_template_nid[LANGUAGE_NONE][0]['value'], $templates)) {
      $default_template_nid = $user_data->field_default_template_nid[LANGUAGE_NONE][0]['value'];
    }
  }

  $form['template_nid'] = array(
    '#type' => 'radios',
    '#title' => 'Available templates',
    '#default_value' => $default_template_nid,
    '#required' => TRUE,
    '#options' => $templates,
  );

  $form_state['step_path'] = 'send_letter/'. $node->nid . '/';
  $form_state['step_destination'] = drupal_get_path_alias('node/' . $node->nid);

  //ToDo: Use t() here and everywhere
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Send letter',
  );

  return $form;
}

/**
 * Submit handler for select template form.
 */
function reiscout_send_letters_select_template_form_submit($form, &$form_state) {
  global $user;

  // Make redirect to step 2.
  // ToDo: why we send letter in page callback instead right here?
  $form_state['rebuild'] = FALSE;
  $form_state['redirect'] =
          url($form_state['step_path'] . $form_state['values']['template_nid'] . '/',
              array('query' => array('destination' => $form_state['step_destination']), 'absolute' => TRUE));

  // Unset old destination to prevent default redirectiion.
  unset($_GET['destination']);

  // Save currently selected template nid as default for current user
  $user_data = user_load($user->uid);
  $user_data->field_default_template_nid[LANGUAGE_NONE][0]['value'] = $form_state['values']['template_nid'];
  user_save($user_data);
}

/**
 * Page callback for send_letter/%/% (step 2).
 * 1. Make call to reiscout_lob_api.
 * 2. Decrease userpoint by one.
 *
 * // ToDo: no sense of this menu callback, replace it by form sumbit handler
 */
function reiscout_send_letters_send_letter_callback($node, $template_node) {
  // Check for valid nid of template
  if (!isset($template_node->nid) || $template_node->nid == 0) {
    // This code is useless as I see..
    // arg is required be menu callback declaration
    // we need to check for right node type here
    drupal_set_message("Template not selected.", "error");
    drupal_goto(url(drupal_get_path_alias('node/' . $node->nid)), array('absolute' => TRUE));
  }

  // Call letters API request (see reiscout_lob_api.module)

  // ToDo: code of reiscout_lob_api_request should be placed in this function.
  try {
    $result = reiscout_lob_api_request($node->nid, $template_node->nid);
  } catch (Exception $e) {
    watchdog_exception('reiscout_lob_api', $e);
    $result = false;
  }


  if (!$result) {
    drupal_set_message("Error sending letter.", "error");
    // Return to previous page
    drupal_goto();
  }
  else {
    _reiscout_send_letters_decrease_user_points();
    _reiscout_send_letters_log($node->nid, $template_node->nid, $result['id']);

    $t_args = array(
      '!url' => $result['url'],
      '%carrier' => $result['carrier'],
      '%date' => $result['expected_delivery_date'],
    );
    $message = t('Your <a href="!url" target="_blank">letter</a> will be sent via %carrier. Expected delivery date is %date', $t_args);
    drupal_set_message($message);

    // Return to previous page
    drupal_goto();
  }
}

/**
 * Page callback for send_letter/%/% (step 2).
 * 1. Make call to reiscout_lob_api.
 * 2. Decrease userpoint by one.
 *
 * // ToDo: no sense of this menu callback, replace it by form sumbit handler
 */
function reiscout_send_letters_send_letter_drupalgap_callback($nid, $template_nid) {
  // ToDo: code of reiscout_lob_api_request should be placed in this function.
  try {
    $result = reiscout_lob_api_request($nid, $template_nid);
  } catch (Exception $e) {
    $result = false;
    watchdog_exception('reiscout_lob_api', $e);
    return FALSE;
  }

  if (!$result) {
    return FALSE;
  }

  _reiscout_send_letters_decrease_user_points();
  _reiscout_send_letters_log($nid, $template_nid, $result['id']);

  $t_args = array(
    '%carrier' => $result['carrier'],
    '%date' => $result['expected_delivery_date'],
  );
  $message = t('Your letter will be sent via %carrier. Expected delivery date is %date', $t_args);

  return $message;
}

/**
 * Implements hook_form_alter
 * 1. Restrict access to "Global template" checkbox for all users
 * exclude administrators.
 * 2. Restrict access to "Default template nid" field for all users
 * exclude administrators.
 * 3. Alters the submit handler of select template form
 */
function reiscout_send_letters_form_alter(&$form, &$form_state, $form_id) {
  $role = user_role_load_by_name('administrator');
  // Hide "Global template" checkbox on letter template node edit page
  // for non-administrators. Also set status of checkbox to unchecked for non-administartors.
  if ($form_id == 'letter_template_node_form') {
    if (!user_has_role($role->rid)) {
      $form['field_is_global_template'][LANGUAGE_NONE]['#default_value'] = 0;
      $form['field_is_global_template']['#access'] = 0;
    }
  }
  // Hide "Default template nid" field on user profile edit page
  // for non-administrators.
  if ($form_id == 'user_profile_form') {
    if (!user_has_role($role->rid)) {
      $form['field_default_template_nid']['#access'] = 0;
    }
  }
  // Add new submit handler to select template form
  // (needed for correct work of redirection).
  if ($form_id == "reiscout_send_letters_select_template_form") {
      $form['actions']['submit']['#submit'][] = 'reiscout_send_letters_select_template_form_submit';
   }
}

/**
 * Implements hook_node_view
 * 1. Check for amount of userpoints
 * 2. Add action button to send letter or to buy points as a commerce product
 */
function reiscout_send_letters_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $node->type == 'property') {
    global $user;

    if (!_reiscout_send_letters_is_user_can_send($node)) {
      return;
    }

    // Prepare HTML-container for action buttons
    if (!isset($node->content['commerce-buttons'])) {
      $node->content['commerce-buttons'] = array(
        '#prefix' => '<div class="commerce-buttons">',
        '#suffix' => '</div>',
        '#markup' => '',
        '#weight' => -1,
      );
    }

    $points = userpoints_get_current_points($user->uid, TERM_ID_POINTS_SEND_LETTERS);
    $button_name = 'Send a letter to Property Owner' . ' (' . $points . ' points left)';
    $callback_path = 'send_letter/' . $node->nid;
    $rules_buy_link = 'buy_sending_letter';

    $destination = drupal_get_destination();

    // If user has enough points for current action
    if ($points > 0) {
      $link = l($button_name, url($callback_path, array('query' => $destination, 'absolute' => TRUE), array('html' => TRUE)));
      $node->content['commerce-buttons']['#markup'] .= '<div class="callback-link">' . $link . '</div>';
    }
    // If not
    else {
      // Add link/button via rules to buy points as a commerce product
      $rendered_link = rules_link_render($rules_buy_link, $node->nid, $destination, array());
      if ($rendered_link) {
        $link = drupal_render($rendered_link);
        $node->content['commerce-buttons']['#markup'] .= $link;
      }
      else {
        $msg = t($rules_buy_link . ' rules link rendering failed.');
        if (in_array('administrator', $user->roles)) {
          drupal_set_message($msg, 'error');
        }
        watchdog('reiscout_send_letters', $msg, array(), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Implementation of hook_services_resources().
 */
function reiscout_send_letters_services_resources() {
  $file = array(
    'type'   => 'inc',
    'module' => 'reiscout_send_letters',
    'name'   => 'reiscout_send_letters.resource'
  );

  $resource = array(
    'sendletters' => array(
      'actions' => array(
        'sendLetter' => array(
          'file' => $file,
          'help' => "Sends a letter to a property's owner.",
          'callback' => '_reiscout_send_letters_send_letter',
          'access callback' => '_reiscout_send_letters_resource_access',
          'access arguments' => array('send_letter'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'params',
              'type' => 'array',
              'source' => 'data',
              'optional' => FALSE,
              'description' => 'The nid of the Property node',
            ),
          ),
        ),
        'checkButtonShow' => array(
          'file' => $file,
          'help' => 'Checks which forms a user have an access to.',
          'callback' => '_reiscout_send_letters_get_show_button_info',
          'access callback' => '_reiscout_send_letters_resource_access',
          'access arguments' => array('show_send_letter_button'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'params',
              'type' => 'array',
              'source' => 'data',
              'optional' => FALSE,
              'description' => 'The nid of the Property node',
            ),
          ),
        ),
      ),
    )
  );
  return $resource;
}

/**
 * Check user access
 *
 * @param string $type
 *  Action type.
 *
 * @param integer $nid
 *  Node nid.
 *
 * @return bool
 */
function _reiscout_send_letters_resource_access($op, $args = array()) {
  global $user;

  if ('show_send_letter_button' == $op) {
    return TRUE;
  }

  $data = $args[0];
  $nid = $data['nid'];
  $node = node_load($nid);

  if (_reiscout_send_letters_is_user_can_send($node)) {
    $points = userpoints_get_current_points($user->uid, TERM_ID_POINTS_SEND_LETTERS);

    // If user has enough points
    if ($points > 0) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Decreases the amount of user points.
 */
function _reiscout_send_letters_decrease_user_points() {
  global $user;

  $params = array(
    'uid' => $user->uid,
    'points' => -1,
    'tid' => TERM_ID_POINTS_SEND_LETTERS,
    'operation' => '1 point was used to send a letter.',
  );

  userpoints_userpointsapi($params);
}

/**
 * Saves information about letter sending to DB.
 */
function _reiscout_send_letters_log($property_nid, $template_nid, $lob_api_letter_id) {
  global $user;

  $record = new stdClass();
  $record->uid = $user->uid;
  $record->pnid = $property_nid;
  $record->tnid = $template_nid;
  $record->lob_api_letter_id = $lob_api_letter_id;
  $record->timestamp = time();

  drupal_write_record('reiscout_send_letters_history', $record);
}

/**
 * Returns an ID of letter template for a given user.
 */
function _reiscout_send_letters_get_template_nid_by_uid($uid) {
  $uw = entity_metadata_wrapper('user', $uid);
  $tnid = $uw->field_default_template_nid->value();

  return $tnid ? $tnid : REISCOUT_SEND_LETTERS_DEFAULT_TEMPLATE_NID;
}
