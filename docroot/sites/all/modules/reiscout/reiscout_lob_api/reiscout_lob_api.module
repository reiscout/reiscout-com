<?php

/**
 * @file
 * Reiscout Lob API -
 * 1. Load and merge template file and template body into one template
 * 2. Get addresses (to and from) from addresses fields.
 * 3. Send letters to property owner via lob.com API.
 */

define('REISCOUT_LOB_API_EXCEPTION_API_KEY_IS_NOT_SET', 0);
define('REISCOUT_LOB_API_EXCEPTION_INVALID_TEMPLATE_NODE', 1);
define('REISCOUT_LOB_API_EXCEPTION_INVALID_PROPERTY_NODE', 2);
define('REISCOUT_LOB_API_EXCEPTION_OWNER_ADDRESS_IS_NOT_SET', 3);
define('REISCOUT_LOB_API_EXCEPTION_USER_ADDRESS_IS_NOT_SET', 4);
define('REISCOUT_LOB_API_EXCEPTION_USER_PHONE_IS_NOT_SET', 5);
define('REISCOUT_LOB_API_EXCEPTION_TEMPLATE_FILE_NOT_READABLE', 6);
define('REISCOUT_LOB_API_EXCEPTION_CURL_ERROR', 7);
define('REISCOUT_LOB_API_EXCEPTION_JSON_ERROR', 8);
define('REISCOUT_LOB_API_EXCEPTION_REQUEST_ERROR', 9);

// ToDo: rename module to lob_api

// Define constants
// ToDo: rename constants, add modulename prefix.
const REISCOUT_LOB_ENDPOINT = 'https://api.lob.com/v1/letters';
const LOB_LETTER_DESCRIPTION  = 'A letter from reiscout.com';

/**
 * Implements hook_menu().
 */
function reiscout_lob_api_menu () {
  $items['admin/config/reiscout_lob_api'] = array(
    'title' => 'Reiscout LOB API settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reiscout_lob_api_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements settings form.
 */
function reiscout_lob_api_settings_form($form, &$form_state) {

  // ToDo: place a ling to LOB API docs.
  $form['reiscout_lob_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#default_value' => variable_get('reiscout_lob_api_key', ''),
    '#required' => TRUE,
  );

  // ToDo: place a description where this text is figuring out.
  $form['reiscout_lob_api_letter_description'] = array(
    '#type' => 'textfield',
    '#title' => t('A letter from reiscout.com'),
    '#default_value' => variable_get('reiscout_lob_api_letter_description', 'A letter from reiscout.com'),
  );

  $form['reiscout_lob_api_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug mode on.'),
    '#description' => t('Log to watchdog request and response.'),
    '#default_value' => variable_get('reiscout_lob_api_debug', FALSE),
  );

  return system_settings_form($form);
}

/**
 * Construct request to Lob API and parse response.
 * ToDo: move reiscout specific code and functions to reiscout_send_letters
 *  to template selection form sumbit handler
 */
function reiscout_lob_api_request($nid, $template_nid = 0) {
  global $user;

  if (!variable_get('reiscout_lob_api_key')) {
    $msg = t('LOB API key is not set. Set it on !settings page', array(
      '!settings' => l('settings', 'admin/config/reiscout_lob_api'),
    ));
    throw new Exception($msg, REISCOUT_LOB_API_EXCEPTION_API_KEY_IS_NOT_SET);
  }

  // Check if node exists and has type "letter_template"
  $template = node_load($template_nid);
  if (!$template || $template->type != 'letter_template') {
    $msg = t('Template node is invalid.');
    throw new Exception($msg, REISCOUT_LOB_API_EXCEPTION_INVALID_TEMPLATE_NODE);
  }

  // Check if node exists and has type "property"
  $node = node_load($nid);
  if (!$node || $node->type != 'property') {
    $msg = t('Property node is invalid.');
    throw new Exception($msg, REISCOUT_LOB_API_EXCEPTION_INVALID_PROPERTY_NODE);
  }

  // Check "Owner postal address" field from current node
  if (!isset($node->field_owner_postal_address[LANGUAGE_NONE][0]) ||
      empty($node->field_owner_postal_address[LANGUAGE_NONE][0])) {
    $msg = t("Property's owner postal address is empty or incomplete.");
    throw new Exception($msg, REISCOUT_LOB_API_EXCEPTION_OWNER_ADDRESS_IS_NOT_SET);
  }

  // Check "User postal address" field from user profile
  $user_data = user_load($user->uid);
  if (!isset($user_data->field_user_postal_address[LANGUAGE_NONE][0]) ||
      empty($user_data->field_user_postal_address[LANGUAGE_NONE][0])) {
    $msg = t('User postal address is empty or incomplete.');
    throw new Exception($msg, REISCOUT_LOB_API_EXCEPTION_USER_ADDRESS_IS_NOT_SET);
  }

  // Check if 'User Phone Number' field was filled
  if (empty($user_data->field_user_phone_number[LANGUAGE_NONE][0])) {
    $msg = t('User phone number is not set.');
    throw new Exception($msg, REISCOUT_LOB_API_EXCEPTION_USER_PHONE_IS_NOT_SET);
  }

  // Load global HTML-wrapper (template.html)
  $template_wrapper = file_get_contents(drupal_get_path('module', 'reiscout_send_letters') . '/template.html');
  if ($template_wrapper === FALSE) {
    $msg = t('template.html file is not readable.');
    throw new Exception($msg, REISCOUT_LOB_API_EXCEPTION_TEMPLATE_FILE_NOT_READABLE);
  }

  // Adds template body to wrapper
  $template_wrapper = str_replace('{{body}}', filter_xss_admin($template->body[LANGUAGE_NONE][0]['safe_value']), $template_wrapper);

  // Fills up addresses arrays
  $address_to = $node->field_owner_postal_address[LANGUAGE_NONE][0];
  $address_from = $user_data->field_user_postal_address[LANGUAGE_NONE][0];


  // ToDo: move CURL and etc api specific stuff to separate function.
  // Url for POST request to lob.com

  $params = array(
    'description'           => LOB_LETTER_DESCRIPTION,

    'to[name]'              => $address_to['name_line'],
    'to[address_line1]'     => $address_to['thoroughfare'],
    'to[address_city]'      => $address_to['locality'],
    'to[address_zip]'       => $address_to['postal_code'],
    'to[address_state]'     => $address_to['administrative_area'],
    'to[address_country]'   => $address_to['country'],

    'from[name]'            => $address_from['name_line'],
    'from[address_line1]'   => $address_from['thoroughfare'],
    'from[address_city]'    => $address_from['locality'],
    'from[address_zip]'     => $address_from['postal_code'],
    'from[address_state]'   => $address_from['administrative_area'],
    'from[address_country]' => $address_from['country'],

    'file'                  => $template_wrapper,

    'data[owner_name]'      => $address_to['name_line'],
    'data[street_address]'  => $node->field_address[LANGUAGE_NONE][0]['thoroughfare'],
    'data[city]'            => $node->field_address[LANGUAGE_NONE][0]['locality'],
    'data[my_phone]'        => $user_data->field_user_phone_number[LANGUAGE_NONE][0]['safe_value'],

    'double_sided'          => false,
    'color'                 => true
  );

  $defaults = array(
      CURLOPT_URL             => REISCOUT_LOB_ENDPOINT,
      CURLOPT_POST            => TRUE,
      CURLOPT_FRESH_CONNECT   => TRUE,
      CURLOPT_POSTFIELDS      => http_build_query($params),
      CURLOPT_RETURNTRANSFER  => TRUE,
      CURLOPT_SSL_VERIFYPEER  => FALSE,
      CURLOPT_SSL_VERIFYHOST  => FALSE,
      CURLOPT_USERPWD         => variable_get('reiscout_lob_api_key') . ':',
      CURLOPT_HTTPHEADER      => array(
          'Accept' => 'application/json; charset=utf-8',
      ),
  );

  $ch = curl_init();
  curl_setopt_array($ch, $defaults);
  $response = curl_exec($ch);

  if (variable_get('reiscout_lob_api_debug', FALSE)) {
    watchdog('reiscout_lob_api', 'Request params: !var', array('!var' => '<pre>' . var_export($params, true) . '</pre>'));
    watchdog('reiscout_lob_api', 'Sent headers: !var', array('!var' => '<pre>' . var_export($defaults, true) . '</pre>'));
    watchdog('reiscout_lob_api', 'Response: !var', array('!var' => '<pre>' . var_export($response, true) . '</pre>'));
  }

  // Send request to Lob API via curl()
  if (!$response) {
    $msg = t('CURL error: !error', array('!error' => curl_error($ch)));
    throw new Exception($msg, REISCOUT_LOB_API_EXCEPTION_CURL_ERROR);
  }
  curl_close($ch);

  // Decode returned JSON response to array
  $result = json_decode($response, TRUE);
  if (json_last_error() != JSON_ERROR_NONE) {
    $msg = t('JSON decode error: !error', array('!error' => json_last_error_msg()));
    throw new Exception($msg, REISCOUT_LOB_API_EXCEPTION_JSON_ERROR);
  }

  // Check if response has error
  if (array_key_exists('error', $result)) {
    $msg = t('LOB API request error: !error', array('!error' => $result['error']['message']));
    throw new Exception($msg, REISCOUT_LOB_API_EXCEPTION_REQUEST_ERROR);
  }

  // Display some returned data to administrator
  $role = user_role_load_by_name('administrator');
  if (user_has_role($role->rid)) {
    drupal_set_message('Letter ID: <a href="' . $result['url'] . '">' . $result['id'] . '</a> created at ' . $result['date_created']);
  }

  return $result;
}
