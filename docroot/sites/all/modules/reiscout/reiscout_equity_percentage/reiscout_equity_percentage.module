<?php

/**
 * @file
 * Calculates an equity percentage for a property.
 */

/**
 * Implements hook_menu().
 */
function reiscout_equity_percentage_menu() {
  $items['admin/reports/reiscout_equity_percentage'] = array(
    'title' => 'Uncalculated purchased properties',
    'description' => "Shows a list of properties whose 'Address Access' product was purchased, but whose 'Calculated Equity Percentage' field was not yet calculated.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reiscout_equity_percentage_report_page'),
    'access arguments' => array('access site reports'),
    'file' => 'reiscout_equity_percentage.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_field_access().
 */
function reiscout_equity_percentage_field_access($op, $field, $entity_type, $entity, $account) {
  if ('node' == $entity_type && !empty($entity->type) && 'property' == $entity->type) {
    if ('view' == $op) {
      if ('field_ep_calculated' == $field['field_name']) {
        $nw = entity_metadata_wrapper('node', $entity);
        if ($nw->field_ep_calculated->value()) {
          return TRUE;
        }
        else {
          return FALSE;
        }
      }
    }
    else if ('edit' == $op) {
      if ('field_ep_calculated' == $field['field_name']) {
        $role_admin = user_role_load_by_name('administrator');
        if (!user_has_role($role_admin->rid)) {
          return FALSE;
        }
      }
    }
  }
}

/**
 * Updates a 'Calculated Equity Percentage' field.
 *
 * Calculates and updates a 'Calculated Equity Percentage' field
 * in a given property.
 */
function reiscout_equity_percentage_recalculate_in_property_by_nid($nid) {
  $node = node_load($nid);

  // Make a request to the Connect2Data API to get full info about property
  if (!$info = _reiscout_property_get_c2d_report_by_nid($nid, 'ep_calculation')) {
    $message = 'An error occurred while requesting the information about property !nid.';
    watchdog('reiscout_equity_percentage', $message, array('!nid' => $nid), WATCHDOG_ERROR);
    return FALSE;
  }

  // The date the property was sold
  $sale_date = $info->_PROPERTY_HISTORY->_SALES_HISTORY->attributes()->_LastSalesDate->__toString();

  if (!$sale_date) {
    $message = "The _LastSalesDate field is blank in the report for property !nid.";
    watchdog('reiscout_equity_percentage', $message, array('!nid' => $nid), WATCHDOG_ERROR);
    return FALSE;
  }

  if (!strtotime($sale_date)) {
    $message = "The _LastSalesDate field contains an invalid date value in the report for property !nid: @sale_date.";
    watchdog('reiscout_equity_percentage', $message, array('!nid' => $nid, '@sale_date' => $sale_date), WATCHDOG_ERROR);
    return FALSE;
  }

  // Assessed value amount, received from county, based on appraisal and/or market conditions
  $market_value = $info->_PROPERTY_TAX->attributes()->_MarketValue->__toString();

  if (!$market_value) {
    $message = "The _MarketValue field is blank in the report for property !nid.";
    watchdog('reiscout_equity_percentage', $message, array('!nid' => $nid), WATCHDOG_ERROR);
    return FALSE;
  }

  if (!is_numeric($market_value)) {
    $message = "The _MarketValue field contains an invalid value in the report for property !nid: @market_value.";
    watchdog('reiscout_equity_percentage', $message, array('!nid' => $nid, '@market_value' => $market_value), WATCHDOG_ERROR);
    return FALSE;
  }

  // Amount of money used to purchase a property which is funded through
  // a mortgage with seniority over other loans on the property
  $mortgage_amount = $info->_PROPERTY_HISTORY->_MORTGAGE_HISTORY->attributes()->_FirstMortgageAmount->__toString();

  if (!$mortgage_amount) {
    $message = "The _FirstMortgageAmount field is blank in the report for property !nid.";
    watchdog('reiscout_equity_percentage', $message, array('!nid' => $nid), WATCHDOG_ERROR);
    return FALSE;
  }

  if (!is_numeric($mortgage_amount)) {
    $message = "The _FirstMortgageAmount field contains an invalid value in the report for property !nid: @mortgage_amount.";
    watchdog('reiscout_equity_percentage', $message, array('!nid' => $nid, '@mortgage_amount' => $mortgage_amount), WATCHDOG_ERROR);
    return FALSE;
  }

  // Amount of time from recording in which full payment of a mortgage is due
  $mortgage_term = $info->_PROPERTY_HISTORY->_MORTGAGE_HISTORY->attributes()->_FirstMortgageTermNumber->__toString();

  if (!$mortgage_term) {
    $message = "The _FirstMortgageTermNumber field is blank in the report for property !nid.";
    watchdog('reiscout_equity_percentage', $message, array('!nid' => $nid), WATCHDOG_ERROR);
    return FALSE;
  }

  if (!is_numeric($mortgage_term)) {
    $message = "The _FirstMortgageTermNumber field contains an invalid value in the report for property !nid: @mortgage_term.";
    watchdog('reiscout_equity_percentage', $message, array('!nid' => $nid, '@mortgage_term' => $mortgage_term), WATCHDOG_ERROR);
    return FALSE;
  }

  // Annual fixed interest rate for this mortgage
  if (!$mortgage_rate = mortgage_rate_get($mortgage_term, $sale_date)) {
    $message = "Mortage rate is unknown for property !nid.";
    watchdog('reiscout_equity_percentage', $message, array('!nid' => $nid), WATCHDOG_ERROR);
    return FALSE;
  }

  if ($ep = _reiscout_equity_percentage_calculate($sale_date, $market_value, $mortgage_amount, $mortgage_term, $mortgage_rate)) {
    $nw = entity_metadata_wrapper('node', $node);
    $nw->field_ep_calculated = $ep;
    $nw->save();

    $message = 'An equity percentage was calculated for property !nid: !ep.';
    watchdog('reiscout_equity_percentage', $message, array('!nid' => $nid, '!ep' => $ep), WATCHDOG_INFO);
  }
}

/**
 * Calculates and returns an equity percentage estimate.
 *
 * Given the following data:
 * - $property_value;
 * - $mortgage_date;
 * - $mortgage_amount;
 * - $mortgage_term
 *
 * checks if the data are valid, and if yes calculates
 * and returns an equity percentage estimate.
 */
function reiscout_equity_percentage_calculate($property_value, $mortgage_date, $mortgage_amount, $mortgage_term) {
  if (!$property_value || !is_numeric($property_value)
   || !$mortgage_date || !strtotime($mortgage_date)
   || !$mortgage_amount || !is_numeric($mortgage_amount)
   || !$mortgage_term || !is_numeric($mortgage_term)) {
    return FALSE;
  }

  // Annual fixed interest rate for this mortgage
  if (!$mortgage_rate = mortgage_rate_get($mortgage_term, $mortgage_date)) {
    return FALSE;
  }

  return _reiscout_equity_percentage_calculate($mortgage_date, $property_value, $mortgage_amount, $mortgage_term, $mortgage_rate);
}

/**
 * Calculates a property equity percentage.
 */
function _reiscout_equity_percentage_calculate($sale_date, $market_value, $mortgage_amount, $mortgage_term, $mortgage_rate) {
  $equity_percentage = 0;

  $monthly_payment = _reiscout_equity_percentage_calculate_monthly_payment($mortgage_amount, $mortgage_term, $mortgage_rate);
  $number_of_payments = $mortgage_term * 12;
  $monthly_rate = $mortgage_rate / 12 / 100;

  // The timestamp of the first day of the current month
  $ts_first_day_of_current_month = strtotime('first day of this month 00:00:00');

  // The timestamp of the first day of the first mortgage payment month
  $ts = strtotime('first day of next month', strtotime($sale_date));

  $principal_payment_total = 0;
  $beginning_balance = $mortgage_amount;
  for ($i = 0, $len = $number_of_payments; $i < $len; ++$i) {
    // Payments calculations
    $interest_payment = $beginning_balance * $monthly_rate;
    $principal_payment = $monthly_payment - $interest_payment;
    $principal_payment_total += $principal_payment;
    $equity_percentage = (($market_value - $mortgage_amount + $principal_payment_total) / $market_value) * 100;
    $beginning_balance -= $principal_payment;

    // If this mortgage payment month is the current month
    if ($ts_first_day_of_current_month == $ts) {
      break;
    }

    // The timestamp of the first day of the next mortgage payment month
    $ts = strtotime('first day of next month', $ts);
  }

  return $equity_percentage;
}

/**
 * Calculates a monthly mortgage payment.
 *
 * https://en.wikipedia.org/wiki/Fixed-rate_mortgage#Pricing
 *
 * @param $amount - the amount borrowed, known as the loan's principal.
 * @param $term - the loan's term in years.
 * @param $rate - annual percentage rate.
 * @return float
 */
function _reiscout_equity_percentage_calculate_monthly_payment($amount, $term, $rate) {
  // Monthly percentage rate is simply the annual percentage rate
  // divided by 12; dividing the monthly percentage rate by 100
  // gives the monthly rate expressed as a decimal.
  $monthly_rate = $rate / 12 / 100;

  // The total number of monthly payments
  $n = $term * 12;

  return $monthly_rate * $amount / (1 - pow(1 + $monthly_rate, -$n));
}
